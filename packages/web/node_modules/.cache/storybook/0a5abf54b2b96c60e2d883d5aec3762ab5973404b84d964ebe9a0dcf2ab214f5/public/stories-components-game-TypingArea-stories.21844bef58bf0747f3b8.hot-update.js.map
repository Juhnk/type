{"version":3,"file":"stories-components-game-TypingArea-stories.21844bef58bf0747f3b8.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;AACA;AAAA;;AACA;AAAA;AAAA;;;;;;AACA;AACA;;AAQA;AAAA;AAAA;AAAA;;;;;;;;;;;;;AAIA;AAAA;;AACA;AACA;AAMA;AAAA;AAAA;AAGA;AACA;;;;;;;;;;;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AALA;;;;;;;;;;;;;;;;AAYA;AAAA;AACA;AAAA;;AACA;AAAA;;;;;;;;;;;;;;;;;;AAKA;;;AAvEA;;AAEA;AACA;AACA;;;AALA;AA0EA;AACA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AAEA;AAKA;AACA;AAEA;AAEA;AAEA;;AAOA;AAAA;AACA;AACA;AAKA;AAAA;AAAA;;;;;;;;;;;AAGA;AAAA;;AACA;AAAA;AAAA;;;;;;;;;;;;;AAIA;;;AAxCA;AACA;AACA;AACA;AACA;;;AALA","sources":["webpack://type/./src/components/game/WordsProgress.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { useGameStore } from '@/store/useGameStore';\nimport { cn } from '@/lib/utils';\n\nexport function WordsProgress() {\n  const testConfig = useGameStore((state) => state.testConfig);\n  const wordsCompleted = useGameStore((state) => state.wordsCompleted);\n  const wordsProgress = useGameStore((state) => state.wordsProgress);\n  const targetWordCount = useGameStore((state) => state.targetWordCount);\n  const gameStatus = useGameStore((state) => state.gameStatus);\n\n  // Only show for words mode\n  if (testConfig.mode !== 'words') return null;\n\n  // Don't show if game hasn't started\n  if (gameStatus === 'idle' || gameStatus === 'ready') return null;\n\n  const isNearCompletion = wordsProgress >= 80;\n  const isAlmostDone = wordsProgress >= 90;\n\n  return (\n    <div className=\"mx-auto w-full max-w-lg\">\n      <div className=\"mb-2 flex items-center justify-between text-sm\">\n        <span className=\"text-muted-foreground\">Progress</span>\n        <span\n          className={cn(\n            'text-xs font-medium sm:text-sm',\n            isAlmostDone && 'text-success',\n            isNearCompletion &&\n              !isAlmostDone &&\n              'text-info'\n          )}\n        >\n          {wordsCompleted}/{targetWordCount} words\n        </span>\n      </div>\n\n      <div className=\"bg-muted relative h-3 overflow-hidden rounded-full\">\n        <div\n          className={cn(\n            'absolute inset-y-0 left-0 rounded-full transition-all duration-300 ease-out',\n            'bg-primary',\n            isAlmostDone && 'bg-success',\n            isNearCompletion && !isAlmostDone && 'bg-info'\n          )}\n          style={{ width: `${wordsProgress}%` }}\n        >\n          {/* Animated shimmer effect when near completion */}\n          {isNearCompletion && (\n            <div className=\"animate-shimmer absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\" />\n          )}\n        </div>\n\n        {/* Milestone markers */}\n        <div className=\"absolute inset-0 flex justify-between px-1\">\n          {[25, 50, 75].map((milestone) => (\n            <div\n              key={milestone}\n              className={cn(\n                'bg-border/50 h-full w-0.5 transition-opacity',\n                wordsProgress >= milestone && 'opacity-50'\n              )}\n              style={{ marginLeft: `${milestone}%` }}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Percentage text */}\n      <div className=\"mt-1 text-center\">\n        <span className=\"text-muted-foreground text-xs\">\n          {Math.round(wordsProgress)}% complete\n        </span>\n      </div>\n    </div>\n  );\n}\n\n// Compact version for smaller displays\nexport function CompactWordsProgress() {\n  const testConfig = useGameStore((state) => state.testConfig);\n  const wordsCompleted = useGameStore((state) => state.wordsCompleted);\n  const targetWordCount = useGameStore((state) => state.targetWordCount);\n  const wordsProgress = useGameStore((state) => state.wordsProgress);\n  const gameStatus = useGameStore((state) => state.gameStatus);\n\n  if (\n    testConfig.mode !== 'words' ||\n    gameStatus === 'idle' ||\n    gameStatus === 'ready'\n  ) {\n    return null;\n  }\n\n  const isNearCompletion = wordsProgress >= 80;\n\n  return (\n    <div\n      className={cn(\n        'inline-flex items-center gap-2 rounded-full border px-3 py-1 text-sm',\n        'border-muted-foreground/20',\n        isNearCompletion &&\n          'border-success/20 text-success'\n      )}\n    >\n      <div className=\"bg-muted relative h-1.5 w-16 overflow-hidden rounded-full\">\n        <div\n          className={cn(\n            'absolute inset-y-0 left-0 rounded-full transition-all duration-300',\n            'bg-primary',\n            isNearCompletion && 'bg-success'\n          )}\n          style={{ width: `${wordsProgress}%` }}\n        />\n      </div>\n      <span className=\"font-mono\">\n        {wordsCompleted}/{targetWordCount}\n      </span>\n    </div>\n  );\n}\n"],"names":[],"sourceRoot":""}