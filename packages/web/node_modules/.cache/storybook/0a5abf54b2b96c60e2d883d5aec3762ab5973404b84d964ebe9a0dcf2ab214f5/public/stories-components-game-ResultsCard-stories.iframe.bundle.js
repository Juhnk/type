"use strict";
(self["webpackChunktype"] = self["webpackChunktype"] || []).push([["stories-components-game-ResultsCard-stories"],{

/***/ "./src/stories/components/game/ResultsCard.stories.tsx":
/*!*************************************************************!*\
  !*** ./src/stories/components/game/ResultsCard.stories.tsx ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AuthenticatedUser: () => (/* binding */ AuthenticatedUser),
/* harmony export */   DarkMode: () => (/* binding */ DarkMode),
/* harmony export */   DraculaTheme: () => (/* binding */ DraculaTheme),
/* harmony export */   ExcellentTyping: () => (/* binding */ ExcellentTyping),
/* harmony export */   FailedTestExpert: () => (/* binding */ FailedTestExpert),
/* harmony export */   FailedTestMaster: () => (/* binding */ FailedTestMaster),
/* harmony export */   GreatJob: () => (/* binding */ GreatJob),
/* harmony export */   KeepPracticing: () => (/* binding */ KeepPracticing),
/* harmony export */   MobileView: () => (/* binding */ MobileView),
/* harmony export */   OutstandingPerformance: () => (/* binding */ OutstandingPerformance),
/* harmony export */   PerfectAccuracy: () => (/* binding */ PerfectAccuracy),
/* harmony export */   PoorAccuracy: () => (/* binding */ PoorAccuracy),
/* harmony export */   ShortDuration: () => (/* binding */ ShortDuration),
/* harmony export */   WordsMode: () => (/* binding */ WordsMode),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var _components_game_ResultsCard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/game/ResultsCard */ "./src/components/game/ResultsCard.tsx");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));


const meta = {
  title: 'Components/Game/ResultsCard',
  component: _components_game_ResultsCard__WEBPACK_IMPORTED_MODULE_1__.ResultsCard,
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: 'Displays test results after completing a typing session, including WPM, accuracy, and detailed statistics.'
      }
    }
  },
  tags: ['game', 'results', 'autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
// Keep Practicing performance (< 40 WPM)
const KeepPracticing = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 35,
          rawWpm: 38,
          accuracy: 85.5,
          correctChars: 150,
          incorrectChars: 26,
          totalChars: 176,
          elapsedTime: 60000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    },
    docs: {
      description: {
        story: 'Beginner-level performance with room for improvement'
      }
    }
  }
};
// Great Job performance (40-59 WPM)
const GreatJob = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 52,
          rawWpm: 55,
          accuracy: 92.3,
          correctChars: 260,
          incorrectChars: 22,
          totalChars: 282,
          elapsedTime: 60000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    },
    docs: {
      description: {
        story: 'Average typing performance'
      }
    }
  }
};
// Excellent Typing performance (60-79 WPM)
const ExcellentTyping = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 72,
          rawWpm: 75,
          accuracy: 96.8,
          correctChars: 360,
          incorrectChars: 12,
          totalChars: 372,
          elapsedTime: 60000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    },
    docs: {
      description: {
        story: 'Above average typing performance'
      }
    }
  }
};
// Outstanding Performance (80+ WPM)
const OutstandingPerformance = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 95,
          rawWpm: 98,
          accuracy: 98.5,
          correctChars: 475,
          incorrectChars: 7,
          totalChars: 482,
          elapsedTime: 60000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    },
    docs: {
      description: {
        story: 'Professional-level typing performance'
      }
    }
  }
};
// Perfect accuracy
const PerfectAccuracy = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 65,
          rawWpm: 65,
          accuracy: 100,
          correctChars: 325,
          incorrectChars: 0,
          totalChars: 325,
          elapsedTime: 60000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    },
    docs: {
      description: {
        story: 'Perfect 100% accuracy result'
      }
    }
  }
};
// Poor accuracy
const PoorAccuracy = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 45,
          rawWpm: 60,
          accuracy: 75.0,
          correctChars: 225,
          incorrectChars: 75,
          totalChars: 300,
          elapsedTime: 60000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    },
    docs: {
      description: {
        story: 'Low accuracy with many errors'
      }
    }
  }
};
// Authenticated user (score saved)
const AuthenticatedUser = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 68,
          rawWpm: 71,
          accuracy: 94.5,
          correctChars: 340,
          incorrectChars: 20,
          totalChars: 360,
          elapsedTime: 60000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: 'mock-token',
        user: {
          id: '1',
          username: 'speedtyper',
          email: 'user@example.com'
        }
      }
    },
    docs: {
      description: {
        story: 'Shows "Saved!" button for authenticated users'
      }
    }
  }
};
// Failed test - Expert mode
const FailedTestExpert = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 28,
          rawWpm: 35,
          accuracy: 82.0,
          correctChars: 140,
          incorrectChars: 31,
          totalChars: 171,
          elapsedTime: 45000
        },
        testFailed: true,
        failureReason: 'Too many errors! Accuracy dropped below 85%.',
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Expert'
        }
      },
      auth: {
        token: null
      }
    },
    docs: {
      description: {
        story: 'Failed test in Expert mode due to low accuracy'
      }
    }
  }
};
// Failed test - Master mode
const FailedTestMaster = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 45,
          rawWpm: 50,
          accuracy: 88.0,
          correctChars: 225,
          incorrectChars: 31,
          totalChars: 256,
          elapsedTime: 30000
        },
        testFailed: true,
        failureReason: 'Too many errors! Accuracy dropped below 90%.',
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Master'
        }
      },
      auth: {
        token: null
      }
    },
    docs: {
      description: {
        story: 'Failed test in Master mode due to accuracy threshold'
      }
    }
  }
};
// Words mode result
const WordsMode = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 58,
          rawWpm: 61,
          accuracy: 93.5,
          correctChars: 250,
          incorrectChars: 17,
          totalChars: 267,
          elapsedTime: 52000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'words',
          wordCount: 50,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    },
    docs: {
      description: {
        story: 'Results from words mode test'
      }
    }
  }
};
// Short duration test
const ShortDuration = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 82,
          rawWpm: 85,
          accuracy: 96.5,
          correctChars: 68,
          incorrectChars: 3,
          totalChars: 71,
          elapsedTime: 15000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 15,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    },
    docs: {
      description: {
        story: '15-second quick test results'
      }
    }
  }
};
// Dark mode
const DarkMode = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 65,
          rawWpm: 68,
          accuracy: 94.5,
          correctChars: 325,
          incorrectChars: 19,
          totalChars: 344,
          elapsedTime: 60000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    }
  },
  globals: {
    colorScheme: 'dark'
  }
};
// Different themes
const DraculaTheme = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 70,
          rawWpm: 73,
          accuracy: 95.8,
          correctChars: 350,
          incorrectChars: 15,
          totalChars: 365,
          elapsedTime: 60000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    }
  },
  globals: {
    theme: 'dracula'
  }
};
// Mobile view
const MobileView = {
  parameters: {
    mockStore: {
      game: {
        stats: {
          wpm: 55,
          rawWpm: 58,
          accuracy: 91.5,
          correctChars: 275,
          incorrectChars: 26,
          totalChars: 301,
          elapsedTime: 60000
        },
        testFailed: false,
        failureReason: null,
        testConfig: {
          mode: 'time',
          duration: 60,
          difficulty: 'Normal'
        }
      },
      auth: {
        token: null
      }
    },
    viewport: {
      defaultViewport: 'mobile'
    },
    docs: {
      description: {
        story: 'Responsive design for mobile devices'
      }
    }
  }
};
;
const __namedExportsOrder = ["KeepPracticing", "GreatJob", "ExcellentTyping", "OutstandingPerformance", "PerfectAccuracy", "PoorAccuracy", "AuthenticatedUser", "FailedTestExpert", "FailedTestMaster", "WordsMode", "ShortDuration", "DarkMode", "DraculaTheme", "MobileView"];
KeepPracticing.parameters = {
  ...KeepPracticing.parameters,
  docs: {
    ...KeepPracticing.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 35,\n          rawWpm: 38,\n          accuracy: 85.5,\n          correctChars: 150,\n          incorrectChars: 26,\n          totalChars: 176,\n          elapsedTime: 60000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    docs: {\n      description: {\n        story: 'Beginner-level performance with room for improvement'\n      }\n    }\n  }\n}",
      ...KeepPracticing.parameters?.docs?.source
    }
  }
};
GreatJob.parameters = {
  ...GreatJob.parameters,
  docs: {
    ...GreatJob.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 52,\n          rawWpm: 55,\n          accuracy: 92.3,\n          correctChars: 260,\n          incorrectChars: 22,\n          totalChars: 282,\n          elapsedTime: 60000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    docs: {\n      description: {\n        story: 'Average typing performance'\n      }\n    }\n  }\n}",
      ...GreatJob.parameters?.docs?.source
    }
  }
};
ExcellentTyping.parameters = {
  ...ExcellentTyping.parameters,
  docs: {
    ...ExcellentTyping.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 72,\n          rawWpm: 75,\n          accuracy: 96.8,\n          correctChars: 360,\n          incorrectChars: 12,\n          totalChars: 372,\n          elapsedTime: 60000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    docs: {\n      description: {\n        story: 'Above average typing performance'\n      }\n    }\n  }\n}",
      ...ExcellentTyping.parameters?.docs?.source
    }
  }
};
OutstandingPerformance.parameters = {
  ...OutstandingPerformance.parameters,
  docs: {
    ...OutstandingPerformance.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 95,\n          rawWpm: 98,\n          accuracy: 98.5,\n          correctChars: 475,\n          incorrectChars: 7,\n          totalChars: 482,\n          elapsedTime: 60000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    docs: {\n      description: {\n        story: 'Professional-level typing performance'\n      }\n    }\n  }\n}",
      ...OutstandingPerformance.parameters?.docs?.source
    }
  }
};
PerfectAccuracy.parameters = {
  ...PerfectAccuracy.parameters,
  docs: {
    ...PerfectAccuracy.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 65,\n          rawWpm: 65,\n          accuracy: 100,\n          correctChars: 325,\n          incorrectChars: 0,\n          totalChars: 325,\n          elapsedTime: 60000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    docs: {\n      description: {\n        story: 'Perfect 100% accuracy result'\n      }\n    }\n  }\n}",
      ...PerfectAccuracy.parameters?.docs?.source
    }
  }
};
PoorAccuracy.parameters = {
  ...PoorAccuracy.parameters,
  docs: {
    ...PoorAccuracy.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 45,\n          rawWpm: 60,\n          accuracy: 75.0,\n          correctChars: 225,\n          incorrectChars: 75,\n          totalChars: 300,\n          elapsedTime: 60000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    docs: {\n      description: {\n        story: 'Low accuracy with many errors'\n      }\n    }\n  }\n}",
      ...PoorAccuracy.parameters?.docs?.source
    }
  }
};
AuthenticatedUser.parameters = {
  ...AuthenticatedUser.parameters,
  docs: {
    ...AuthenticatedUser.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 68,\n          rawWpm: 71,\n          accuracy: 94.5,\n          correctChars: 340,\n          incorrectChars: 20,\n          totalChars: 360,\n          elapsedTime: 60000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: 'mock-token',\n        user: {\n          id: '1',\n          username: 'speedtyper',\n          email: 'user@example.com'\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Shows \"Saved!\" button for authenticated users'\n      }\n    }\n  }\n}",
      ...AuthenticatedUser.parameters?.docs?.source
    }
  }
};
FailedTestExpert.parameters = {
  ...FailedTestExpert.parameters,
  docs: {
    ...FailedTestExpert.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 28,\n          rawWpm: 35,\n          accuracy: 82.0,\n          correctChars: 140,\n          incorrectChars: 31,\n          totalChars: 171,\n          elapsedTime: 45000\n        },\n        testFailed: true,\n        failureReason: 'Too many errors! Accuracy dropped below 85%.',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Expert'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    docs: {\n      description: {\n        story: 'Failed test in Expert mode due to low accuracy'\n      }\n    }\n  }\n}",
      ...FailedTestExpert.parameters?.docs?.source
    }
  }
};
FailedTestMaster.parameters = {
  ...FailedTestMaster.parameters,
  docs: {
    ...FailedTestMaster.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 45,\n          rawWpm: 50,\n          accuracy: 88.0,\n          correctChars: 225,\n          incorrectChars: 31,\n          totalChars: 256,\n          elapsedTime: 30000\n        },\n        testFailed: true,\n        failureReason: 'Too many errors! Accuracy dropped below 90%.',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Master'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    docs: {\n      description: {\n        story: 'Failed test in Master mode due to accuracy threshold'\n      }\n    }\n  }\n}",
      ...FailedTestMaster.parameters?.docs?.source
    }
  }
};
WordsMode.parameters = {
  ...WordsMode.parameters,
  docs: {
    ...WordsMode.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 58,\n          rawWpm: 61,\n          accuracy: 93.5,\n          correctChars: 250,\n          incorrectChars: 17,\n          totalChars: 267,\n          elapsedTime: 52000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'words',\n          wordCount: 50,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    docs: {\n      description: {\n        story: 'Results from words mode test'\n      }\n    }\n  }\n}",
      ...WordsMode.parameters?.docs?.source
    }
  }
};
ShortDuration.parameters = {
  ...ShortDuration.parameters,
  docs: {
    ...ShortDuration.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 82,\n          rawWpm: 85,\n          accuracy: 96.5,\n          correctChars: 68,\n          incorrectChars: 3,\n          totalChars: 71,\n          elapsedTime: 15000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 15,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    docs: {\n      description: {\n        story: '15-second quick test results'\n      }\n    }\n  }\n}",
      ...ShortDuration.parameters?.docs?.source
    }
  }
};
DarkMode.parameters = {
  ...DarkMode.parameters,
  docs: {
    ...DarkMode.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 65,\n          rawWpm: 68,\n          accuracy: 94.5,\n          correctChars: 325,\n          incorrectChars: 19,\n          totalChars: 344,\n          elapsedTime: 60000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    }\n  },\n  globals: {\n    colorScheme: 'dark'\n  }\n}",
      ...DarkMode.parameters?.docs?.source
    }
  }
};
DraculaTheme.parameters = {
  ...DraculaTheme.parameters,
  docs: {
    ...DraculaTheme.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 70,\n          rawWpm: 73,\n          accuracy: 95.8,\n          correctChars: 350,\n          incorrectChars: 15,\n          totalChars: 365,\n          elapsedTime: 60000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    }\n  },\n  globals: {\n    theme: 'dracula'\n  }\n}",
      ...DraculaTheme.parameters?.docs?.source
    }
  }
};
MobileView.parameters = {
  ...MobileView.parameters,
  docs: {
    ...MobileView.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        stats: {\n          wpm: 55,\n          rawWpm: 58,\n          accuracy: 91.5,\n          correctChars: 275,\n          incorrectChars: 26,\n          totalChars: 301,\n          elapsedTime: 60000\n        },\n        testFailed: false,\n        failureReason: null,\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          difficulty: 'Normal'\n        }\n      },\n      auth: {\n        token: null\n      }\n    },\n    viewport: {\n      defaultViewport: 'mobile'\n    },\n    docs: {\n      description: {\n        story: 'Responsive design for mobile devices'\n      }\n    }\n  }\n}",
      ...MobileView.parameters?.docs?.source
    }
  }
};

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

}]);
//# sourceMappingURL=stories-components-game-ResultsCard-stories.iframe.bundle.js.map