"use strict";
(self["webpackChunktype"] = self["webpackChunktype"] || []).push([["stories-components-game-TypingArea-stories"],{

/***/ "../../node_modules/lucide-react/dist/esm/icons/book-open.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/lucide-react/dist/esm/icons/book-open.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __iconNode: () => (/* binding */ __iconNode),
/* harmony export */   "default": () => (/* binding */ BookOpen)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ "../../node_modules/lucide-react/dist/esm/createLucideIcon.js");
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */



const __iconNode = [
  ["path", { d: "M12 7v14", key: "1akyts" }],
  [
    "path",
    {
      d: "M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z",
      key: "ruj8y"
    }
  ]
];
const BookOpen = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__["default"])("book-open", __iconNode);


//# sourceMappingURL=book-open.js.map


/***/ }),

/***/ "../../node_modules/lucide-react/dist/esm/icons/clock.js":
/*!***************************************************************!*\
  !*** ../../node_modules/lucide-react/dist/esm/icons/clock.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __iconNode: () => (/* binding */ __iconNode),
/* harmony export */   "default": () => (/* binding */ Clock)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ "../../node_modules/lucide-react/dist/esm/createLucideIcon.js");
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */



const __iconNode = [
  ["path", { d: "M12 6v6l4 2", key: "mmk7yg" }],
  ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
];
const Clock = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__["default"])("clock", __iconNode);


//# sourceMappingURL=clock.js.map


/***/ }),

/***/ "../../node_modules/lucide-react/dist/esm/icons/loader-circle.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/lucide-react/dist/esm/icons/loader-circle.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __iconNode: () => (/* binding */ __iconNode),
/* harmony export */   "default": () => (/* binding */ LoaderCircle)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ "../../node_modules/lucide-react/dist/esm/createLucideIcon.js");
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */



const __iconNode = [["path", { d: "M21 12a9 9 0 1 1-6.219-8.56", key: "13zald" }]];
const LoaderCircle = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__["default"])("loader-circle", __iconNode);


//# sourceMappingURL=loader-circle.js.map


/***/ }),

/***/ "../../node_modules/lucide-react/dist/esm/icons/zap.js":
/*!*************************************************************!*\
  !*** ../../node_modules/lucide-react/dist/esm/icons/zap.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   __iconNode: () => (/* binding */ __iconNode),
/* harmony export */   "default": () => (/* binding */ Zap)
/* harmony export */ });
/* harmony import */ var _createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../createLucideIcon.js */ "../../node_modules/lucide-react/dist/esm/createLucideIcon.js");
/**
 * @license lucide-react v0.525.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */



const __iconNode = [
  [
    "path",
    {
      d: "M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z",
      key: "1xq2db"
    }
  ]
];
const Zap = (0,_createLucideIcon_js__WEBPACK_IMPORTED_MODULE_0__["default"])("zap", __iconNode);


//# sourceMappingURL=zap.js.map


/***/ }),

/***/ "./src/components/game/ErrorState.tsx":
/*!********************************************!*\
  !*** ./src/components/game/ErrorState.tsx ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ErrorState: () => (/* binding */ ErrorState)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "../../node_modules/next/dist/compiled/react/jsx-dev-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "../../node_modules/next/dist/compiled/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));

'use client';


function ErrorState({ error, onRetry, onFallback, className = '' }) {
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
        className: `py-12 text-center ${className}`,
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("p", {
                className: "text-destructive mb-4 text-sm",
                children: error
            }, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/ErrorState.tsx",
                lineNumber: 20,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "flex flex-col items-center gap-2",
                children: [
                    onRetry && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("button", {
                        onClick: onRetry,
                        className: "text-primary hover:text-primary/80 text-sm underline",
                        children: "Try again"
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/ErrorState.tsx",
                        lineNumber: 23,
                        columnNumber: 11
                    }, this),
                    onFallback && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("button", {
                        onClick: onFallback,
                        className: "text-muted-foreground hover:text-muted-foreground/80 text-sm underline",
                        children: "Use fallback words"
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/ErrorState.tsx",
                        lineNumber: 31,
                        columnNumber: 11
                    }, this)
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/ErrorState.tsx",
                lineNumber: 21,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/ErrorState.tsx",
        lineNumber: 19,
        columnNumber: 5
    }, this);
}
_c = ErrorState;
ErrorState.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "ErrorState",
    "props": {
        "error": {
            "required": true,
            "tsType": {
                "name": "string"
            },
            "description": ""
        },
        "onRetry": {
            "required": false,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "() => void",
                "signature": {
                    "arguments": [],
                    "return": {
                        "name": "void"
                    }
                }
            },
            "description": ""
        },
        "onFallback": {
            "required": false,
            "tsType": {
                "name": "signature",
                "type": "function",
                "raw": "() => void",
                "signature": {
                    "arguments": [],
                    "return": {
                        "name": "void"
                    }
                }
            },
            "description": ""
        },
        "className": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": "",
            "defaultValue": {
                "value": "''",
                "computed": false
            }
        }
    }
};
var _c;
__webpack_require__.$Refresh$.register(_c, "ErrorState");


const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ }),

/***/ "./src/components/game/LiveStats.tsx":
/*!*******************************************!*\
  !*** ./src/components/game/LiveStats.tsx ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LiveStats: () => (/* binding */ LiveStats)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "../../node_modules/next/dist/compiled/react/jsx-dev-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "../../node_modules/next/dist/compiled/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/store/useGameStore */ "./src/store/useGameStore.ts");
/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/utils */ "./src/lib/utils.ts");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));


var _s = __webpack_require__.$Refresh$.signature();
'use client';



function LiveStats() {
    _s();
    const gameStatus = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "LiveStats.useGameStore[gameStatus]": (state)=>state.gameStatus
    }["LiveStats.useGameStore[gameStatus]"]);
    const stats = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "LiveStats.useGameStore[stats]": (state)=>state.stats
    }["LiveStats.useGameStore[stats]"]);
    const testConfig = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "LiveStats.useGameStore[testConfig]": (state)=>state.testConfig
    }["LiveStats.useGameStore[testConfig]"]);
    // Only show live stats when game is running
    if (gameStatus !== 'running' && gameStatus !== 'finished') return null;
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
        className: "flex justify-center gap-4 sm:gap-6",
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "text-center",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('font-mono text-xl font-bold sm:text-2xl', stats.wpm >= 60 ? 'text-success' : stats.wpm >= 40 ? 'text-primary' : 'text-foreground'),
                        children: stats.wpm
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                        lineNumber: 19,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: "text-muted-foreground text-xs tracking-wide uppercase",
                        children: "WPM"
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                        lineNumber: 31,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                lineNumber: 18,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "text-center",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('font-mono text-xl font-bold sm:text-2xl', stats.accuracy >= 95 ? 'text-success' : stats.accuracy >= 90 ? 'text-warning' : 'text-error'),
                        children: [
                            stats.accuracy,
                            "%"
                        ]
                    }, void 0, true, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                        lineNumber: 38,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: "text-muted-foreground text-xs tracking-wide uppercase",
                        children: "Accuracy"
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                        lineNumber: 50,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                lineNumber: 37,
                columnNumber: 7
            }, this),
            testConfig.mode === 'words' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "text-center",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: "text-foreground font-mono text-xl font-bold sm:text-2xl",
                        children: [
                            Math.floor(stats.elapsedTime / 1000),
                            "s"
                        ]
                    }, void 0, true, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                        lineNumber: 58,
                        columnNumber: 11
                    }, this),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: "text-muted-foreground text-xs tracking-wide uppercase",
                        children: "Elapsed"
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                        lineNumber: 61,
                        columnNumber: 11
                    }, this)
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                lineNumber: 57,
                columnNumber: 9
            }, this),
            testConfig.mode === 'time' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "text-center",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: "text-foreground font-mono text-xl font-bold sm:text-2xl",
                        children: [
                            Math.floor(stats.elapsedTime / 1000),
                            "s"
                        ]
                    }, void 0, true, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                        lineNumber: 69,
                        columnNumber: 11
                    }, this),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: "text-muted-foreground text-xs tracking-wide uppercase",
                        children: "Elapsed"
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                        lineNumber: 72,
                        columnNumber: 11
                    }, this)
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
                lineNumber: 68,
                columnNumber: 9
            }, this)
        ]
    }, void 0, true, {
        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LiveStats.tsx",
        lineNumber: 16,
        columnNumber: 5
    }, this);
}
_s(LiveStats, "+/j/n6az0y4SHoGbvJdSjahtuLA=", false, function() {
    return [
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore
    ];
});
_c = LiveStats;
LiveStats.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "LiveStats"
};
var _c;
__webpack_require__.$Refresh$.register(_c, "LiveStats");


const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ }),

/***/ "./src/components/game/LoadingState.tsx":
/*!**********************************************!*\
  !*** ./src/components/game/LoadingState.tsx ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LoadingState: () => (/* binding */ LoadingState)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "../../node_modules/next/dist/compiled/react/jsx-dev-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "../../node_modules/next/dist/compiled/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _barrel_optimize_names_BookOpen_Clock_Loader2_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=BookOpen,Clock,Loader2,Zap!=!lucide-react */ "../../node_modules/lucide-react/dist/esm/icons/book-open.js");
/* harmony import */ var _barrel_optimize_names_BookOpen_Clock_Loader2_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=BookOpen,Clock,Loader2,Zap!=!lucide-react */ "../../node_modules/lucide-react/dist/esm/icons/zap.js");
/* harmony import */ var _barrel_optimize_names_BookOpen_Clock_Loader2_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=BookOpen,Clock,Loader2,Zap!=!lucide-react */ "../../node_modules/lucide-react/dist/esm/icons/clock.js");
/* harmony import */ var _barrel_optimize_names_BookOpen_Clock_Loader2_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=BookOpen,Clock,Loader2,Zap!=!lucide-react */ "../../node_modules/lucide-react/dist/esm/icons/loader-circle.js");
/* harmony import */ var _hooks_useDeviceDetection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/hooks/useDeviceDetection */ "./src/hooks/useDeviceDetection.ts");
/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/utils */ "./src/lib/utils.ts");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));


var _s = __webpack_require__.$Refresh$.signature();
'use client';




function LoadingState({ message = 'Loading...', className = '', variant = 'default', showProgress = false, progress = 0 }) {
    _s();
    const { isMobile } = (0,_hooks_useDeviceDetection__WEBPACK_IMPORTED_MODULE_3__.useDeviceDetection)();
    const getIcon = ()=>{
        switch(variant){
            case 'preparing':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_barrel_optimize_names_BookOpen_Clock_Loader2_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_5__["default"], {
                    className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('text-info animate-pulse', isMobile ? 'h-6 w-6' : 'h-8 w-8')
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                    lineNumber: 29,
                    columnNumber: 11
                }, this);
            case 'typing':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_barrel_optimize_names_BookOpen_Clock_Loader2_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_6__["default"], {
                    className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('text-success animate-pulse', isMobile ? 'h-6 w-6' : 'h-8 w-8')
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                    lineNumber: 38,
                    columnNumber: 11
                }, this);
            case 'processing':
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_barrel_optimize_names_BookOpen_Clock_Loader2_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_7__["default"], {
                    className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('text-warning animate-spin', isMobile ? 'h-6 w-6' : 'h-8 w-8')
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                    lineNumber: 47,
                    columnNumber: 11
                }, this);
            default:
                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_barrel_optimize_names_BookOpen_Clock_Loader2_Zap_lucide_react__WEBPACK_IMPORTED_MODULE_8__["default"], {
                    className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('text-primary animate-spin', isMobile ? 'h-6 w-6' : 'h-8 w-8')
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                    lineNumber: 56,
                    columnNumber: 11
                }, this);
        }
    };
    const getLoadingMessages = ()=>{
        const messages = {
            preparing: [
                'Preparing your typing challenge...',
                'Selecting words for your level...',
                'Setting up your practice session...'
            ],
            typing: [
                'Processing your input...',
                'Calculating your performance...',
                'Analyzing your typing patterns...'
            ],
            processing: [
                'Saving your results...',
                'Updating your statistics...',
                'Finalizing your session...'
            ],
            default: [
                'Loading...',
                'Please wait...',
                'Getting things ready...'
            ]
        };
        return messages[variant] || messages.default;
    };
    // Cycle through different loading messages for better UX
    const [messageIndex, setMessageIndex] = react__WEBPACK_IMPORTED_MODULE_2___default().useState(0);
    const loadingMessages = getLoadingMessages();
    react__WEBPACK_IMPORTED_MODULE_2___default().useEffect({
        "LoadingState.useEffect": ()=>{
            if (loadingMessages.length > 1) {
                const interval = setInterval({
                    "LoadingState.useEffect.interval": ()=>{
                        setMessageIndex({
                            "LoadingState.useEffect.interval": (prev)=>(prev + 1) % loadingMessages.length
                        }["LoadingState.useEffect.interval"]);
                    }
                }["LoadingState.useEffect.interval"], 2000);
                return ({
                    "LoadingState.useEffect": ()=>clearInterval(interval)
                })["LoadingState.useEffect"];
            }
        }
    }["LoadingState.useEffect"], [
        loadingMessages.length
    ]);
    const currentMessage = message === 'Loading...' ? loadingMessages[messageIndex] : message;
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('flex flex-col items-center justify-center space-y-4', isMobile ? 'py-8' : 'py-12', className),
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "flex items-center justify-center",
                children: getIcon()
            }, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                lineNumber: 113,
                columnNumber: 7
            }, this),
            showProgress && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "w-full max-w-xs",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: "bg-muted h-2 w-full rounded-full",
                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                            className: "bg-primary h-2 rounded-full transition-all duration-300 ease-out",
                            style: {
                                width: `${Math.min(100, Math.max(0, progress))}%`
                            }
                        }, void 0, false, {
                            fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                            lineNumber: 119,
                            columnNumber: 13
                        }, this)
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                        lineNumber: 118,
                        columnNumber: 11
                    }, this),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("p", {
                        className: "text-muted-foreground mt-2 text-center text-xs",
                        children: [
                            Math.round(progress),
                            "% complete"
                        ]
                    }, void 0, true, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                        lineNumber: 124,
                        columnNumber: 11
                    }, this)
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                lineNumber: 117,
                columnNumber: 9
            }, this),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "space-y-1 text-center",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("p", {
                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('text-muted-foreground font-medium', isMobile ? 'text-sm' : 'text-base'),
                        children: currentMessage
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                        lineNumber: 132,
                        columnNumber: 9
                    }, this),
                    variant === 'preparing' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("p", {
                        className: "text-muted-foreground/75 text-xs",
                        children: "This may take a few seconds for optimal word selection"
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                        lineNumber: 143,
                        columnNumber: 11
                    }, this)
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                lineNumber: 131,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "flex gap-1",
                children: [
                    0,
                    1,
                    2
                ].map((i)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('bg-primary/30 rounded-full', isMobile ? 'h-2 w-2' : 'h-3 w-3'),
                        style: {
                            animation: `pulse 1.5s ease-in-out ${i * 0.2}s infinite`
                        }
                    }, i, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                        lineNumber: 152,
                        columnNumber: 11
                    }, this))
            }, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
                lineNumber: 150,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/LoadingState.tsx",
        lineNumber: 105,
        columnNumber: 5
    }, this);
}
_s(LoadingState, "qVjUrHqx8xn3HQMAbMeQ+iH7ADQ=", false, function() {
    return [
        _hooks_useDeviceDetection__WEBPACK_IMPORTED_MODULE_3__.useDeviceDetection
    ];
});
_c = LoadingState;
LoadingState.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "LoadingState",
    "props": {
        "message": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": "",
            "defaultValue": {
                "value": "'Loading...'",
                "computed": false
            }
        },
        "className": {
            "required": false,
            "tsType": {
                "name": "string"
            },
            "description": "",
            "defaultValue": {
                "value": "''",
                "computed": false
            }
        },
        "variant": {
            "required": false,
            "tsType": {
                "name": "union",
                "raw": "'default' | 'preparing' | 'typing' | 'processing'",
                "elements": [
                    {
                        "name": "literal",
                        "value": "'default'"
                    },
                    {
                        "name": "literal",
                        "value": "'preparing'"
                    },
                    {
                        "name": "literal",
                        "value": "'typing'"
                    },
                    {
                        "name": "literal",
                        "value": "'processing'"
                    }
                ]
            },
            "description": "",
            "defaultValue": {
                "value": "'default'",
                "computed": false
            }
        },
        "showProgress": {
            "required": false,
            "tsType": {
                "name": "boolean"
            },
            "description": "",
            "defaultValue": {
                "value": "false",
                "computed": false
            }
        },
        "progress": {
            "required": false,
            "tsType": {
                "name": "number"
            },
            "description": "",
            "defaultValue": {
                "value": "0",
                "computed": false
            }
        }
    }
};
var _c;
__webpack_require__.$Refresh$.register(_c, "LoadingState");


const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ }),

/***/ "./src/components/game/TimerDisplay.tsx":
/*!**********************************************!*\
  !*** ./src/components/game/TimerDisplay.tsx ***!
  \**********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CompactTimerDisplay: () => (/* binding */ CompactTimerDisplay),
/* harmony export */   TimerDisplay: () => (/* binding */ TimerDisplay)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "../../node_modules/next/dist/compiled/react/jsx-dev-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "../../node_modules/next/dist/compiled/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/store/useGameStore */ "./src/store/useGameStore.ts");
/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/utils */ "./src/lib/utils.ts");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));


var _s = __webpack_require__.$Refresh$.signature(), _s1 = __webpack_require__.$Refresh$.signature();
'use client';



function TimerDisplay() {
    _s();
    const testConfig = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TimerDisplay.useGameStore[testConfig]": (state)=>state.testConfig
    }["TimerDisplay.useGameStore[testConfig]"]);
    const timeRemaining = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TimerDisplay.useGameStore[timeRemaining]": (state)=>state.timeRemaining
    }["TimerDisplay.useGameStore[timeRemaining]"]);
    const isTimerRunning = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TimerDisplay.useGameStore[isTimerRunning]": (state)=>state.isTimerRunning
    }["TimerDisplay.useGameStore[isTimerRunning]"]);
    const gameStatus = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TimerDisplay.useGameStore[gameStatus]": (state)=>state.gameStatus
    }["TimerDisplay.useGameStore[gameStatus]"]);
    // Only show timer for time mode
    if (testConfig.mode !== 'time') return null;
    const totalSeconds = Math.ceil(timeRemaining / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    // Determine urgency levels
    const isVeryLowTime = totalSeconds <= 5;
    const isLowTime = totalSeconds <= 10;
    const isWarningTime = totalSeconds <= 30;
    // Format display based on duration
    const formatTime = ()=>{
        if (testConfig.duration >= 60) {
            // Show mm:ss for longer tests
            return `${minutes}:${seconds.toString().padStart(2, '0')}`;
        } else {
            // Show just seconds for shorter tests
            return `${totalSeconds}s`;
        }
    };
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
        className: "flex items-center justify-center",
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('font-mono text-3xl font-bold transition-all duration-200', {
                    // Normal state
                    'text-muted-foreground': gameStatus === 'ready' || gameStatus === 'paused',
                    'text-foreground': gameStatus === 'running' && !isWarningTime,
                    // Warning states
                    'text-warning': isWarningTime && !isLowTime,
                    'text-error animate-pulse': isLowTime && !isVeryLowTime,
                    'text-error animate-bounce': isVeryLowTime,
                    // Size based on urgency
                    'text-4xl': isLowTime,
                    'text-5xl': isVeryLowTime
                }),
                children: formatTime()
            }, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TimerDisplay.tsx",
                lineNumber: 38,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "ms-3 flex flex-col items-center",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('transition-base h-2 w-2 rounded-full', {
                            'bg-muted': gameStatus === 'ready' || gameStatus === 'paused',
                            'animate-pulse-subtle bg-success': gameStatus === 'running' && isTimerRunning,
                            'bg-error': gameStatus === 'finished'
                        })
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TimerDisplay.tsx",
                        lineNumber: 63,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("span", {
                        className: "text-muted-foreground mt-1 text-xs",
                        children: [
                            gameStatus === 'ready' && 'Ready',
                            gameStatus === 'running' && 'Running',
                            gameStatus === 'paused' && 'Paused',
                            gameStatus === 'finished' && 'Finished'
                        ]
                    }, void 0, true, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TimerDisplay.tsx",
                        lineNumber: 71,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TimerDisplay.tsx",
                lineNumber: 62,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TimerDisplay.tsx",
        lineNumber: 37,
        columnNumber: 5
    }, this);
}
_s(TimerDisplay, "YyKSs5ho9tQwgbW+rdXRtVAzxQM=", false, function() {
    return [
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore
    ];
});
_c = TimerDisplay;
// Alternative compact timer for when space is limited
function CompactTimerDisplay() {
    _s1();
    const testConfig = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "CompactTimerDisplay.useGameStore[testConfig]": (state)=>state.testConfig
    }["CompactTimerDisplay.useGameStore[testConfig]"]);
    const timeRemaining = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "CompactTimerDisplay.useGameStore[timeRemaining]": (state)=>state.timeRemaining
    }["CompactTimerDisplay.useGameStore[timeRemaining]"]);
    const gameStatus = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "CompactTimerDisplay.useGameStore[gameStatus]": (state)=>state.gameStatus
    }["CompactTimerDisplay.useGameStore[gameStatus]"]);
    if (testConfig.mode !== 'time') return null;
    const totalSeconds = Math.ceil(timeRemaining / 1000);
    const isLowTime = totalSeconds <= 10;
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('inline-flex items-center gap-2 rounded-full border px-3 py-1 font-mono text-sm', {
            'border-muted-foreground/20 text-muted-foreground': gameStatus !== 'running',
            'border-success/20 text-success': gameStatus === 'running' && !isLowTime,
            'border-error/20 text-error animate-pulse': gameStatus === 'running' && isLowTime
        }),
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('h-1.5 w-1.5 rounded-full', {
                    'bg-muted-foreground/40': gameStatus !== 'running',
                    'bg-success': gameStatus === 'running' && !isLowTime,
                    'bg-error': gameStatus === 'running' && isLowTime
                })
            }, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TimerDisplay.tsx",
                lineNumber: 107,
                columnNumber: 7
            }, this),
            totalSeconds,
            "s"
        ]
    }, void 0, true, {
        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TimerDisplay.tsx",
        lineNumber: 94,
        columnNumber: 5
    }, this);
}
_s1(CompactTimerDisplay, "Iplg4mJuW/nu3mQa7iRtnMu80L8=", false, function() {
    return [
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore
    ];
});
_c1 = CompactTimerDisplay;
TimerDisplay.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "TimerDisplay"
};
CompactTimerDisplay.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "CompactTimerDisplay"
};
var _c, _c1;
__webpack_require__.$Refresh$.register(_c, "TimerDisplay");
__webpack_require__.$Refresh$.register(_c1, "CompactTimerDisplay");


const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ }),

/***/ "./src/components/game/TypingArea.tsx":
/*!********************************************!*\
  !*** ./src/components/game/TypingArea.tsx ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TypingArea: () => (/* binding */ TypingArea)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "../../node_modules/next/dist/compiled/react/jsx-dev-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "../../node_modules/next/dist/compiled/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/store/useGameStore */ "./src/store/useGameStore.ts");
/* harmony import */ var _ResultsCard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ResultsCard */ "./src/components/game/ResultsCard.tsx");
/* harmony import */ var _LoadingState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./LoadingState */ "./src/components/game/LoadingState.tsx");
/* harmony import */ var _ErrorState__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ErrorState */ "./src/components/game/ErrorState.tsx");
/* harmony import */ var _TimerDisplay__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TimerDisplay */ "./src/components/game/TimerDisplay.tsx");
/* harmony import */ var _LiveStats__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./LiveStats */ "./src/components/game/LiveStats.tsx");
/* harmony import */ var _WordsProgress__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./WordsProgress */ "./src/components/game/WordsProgress.tsx");
/* harmony import */ var _hooks_useTimerCleanup__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/hooks/useTimerCleanup */ "./src/hooks/useTimerCleanup.ts");
/* harmony import */ var _hooks_useDeviceDetection__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/hooks/useDeviceDetection */ "./src/hooks/useDeviceDetection.ts");
/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/lib/utils */ "./src/lib/utils.ts");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));


var _s = __webpack_require__.$Refresh$.signature();
'use client';











// Helper function to calculate current word boundaries
const getCurrentWordBounds = (currentWordIndex, wordBoundaries, textLength)=>{
    const start = wordBoundaries[currentWordIndex] || 0;
    const end = wordBoundaries[currentWordIndex + 1] || textLength;
    return {
        start,
        end
    };
};
function TypingArea() {
    _s();
    var _s1 = __webpack_require__.$Refresh$.signature(), _s2 = __webpack_require__.$Refresh$.signature();
    // Use timer cleanup hooks
    (0,_hooks_useTimerCleanup__WEBPACK_IMPORTED_MODULE_10__.useTimerCleanup)();
    (0,_hooks_useTimerCleanup__WEBPACK_IMPORTED_MODULE_10__.useTimerVisibility)();
    // Mobile detection and optimization
    const { isMobile, isTouchDevice } = (0,_hooks_useDeviceDetection__WEBPACK_IMPORTED_MODULE_11__.useDeviceDetection)();
    const hasVirtualKeyboard = (0,_hooks_useDeviceDetection__WEBPACK_IMPORTED_MODULE_11__.useVirtualKeyboard)();
    // Use atomic selectors to prevent infinite loop and optimize performance
    const charStates = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TypingArea.useGameStore[charStates]": (state)=>state.charStates
    }["TypingArea.useGameStore[charStates]"]);
    const gameStatus = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TypingArea.useGameStore[gameStatus]": (state)=>state.gameStatus
    }["TypingArea.useGameStore[gameStatus]"]);
    const testConfig = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TypingArea.useGameStore[testConfig]": (state)=>state.testConfig
    }["TypingArea.useGameStore[testConfig]"]);
    const textWindow = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TypingArea.useGameStore[textWindow]": (state)=>state.textWindow
    }["TypingArea.useGameStore[textWindow]"]);
    const handleKeyPress = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TypingArea.useGameStore[handleKeyPress]": (state)=>state.handleKeyPress
    }["TypingArea.useGameStore[handleKeyPress]"]);
    const isPreparingGame = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TypingArea.useGameStore[isPreparingGame]": (state)=>state.isPreparingGame
    }["TypingArea.useGameStore[isPreparingGame]"]);
    const gamePreparationError = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TypingArea.useGameStore[gamePreparationError]": (state)=>state.gamePreparationError
    }["TypingArea.useGameStore[gamePreparationError]"]);
    const prepareGame = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TypingArea.useGameStore[prepareGame]": (state)=>state.prepareGame
    }["TypingArea.useGameStore[prepareGame]"]);
    const useFallbackWords = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "TypingArea.useGameStore[useFallbackWords]": (state)=>state.useFallbackWords
    }["TypingArea.useGameStore[useFallbackWords]"]);
    // Prepare game on component mount
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({
        "TypingArea.useEffect": ()=>{
            prepareGame();
        }
    }["TypingArea.useEffect"], [
        prepareGame
    ]);
    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({
        "TypingArea.useEffect": ()=>{
            const handleKeyDown = {
                "TypingArea.useEffect.handleKeyDown": (event)=>{
                    // Prevent default browser actions for specific keys
                    if (event.key === 'Tab' || event.key === 'Escape' || event.key === ' ' && event.target === document.body) {
                        event.preventDefault();
                    }
                    // Only handle typing when game is ready or running
                    if (gameStatus === 'ready' || gameStatus === 'running') {
                        handleKeyPress(event.key);
                    }
                }
            }["TypingArea.useEffect.handleKeyDown"];
            // Add global keydown listener
            document.addEventListener('keydown', handleKeyDown);
            // Cleanup function to remove listener
            return ({
                "TypingArea.useEffect": ()=>{
                    document.removeEventListener('keydown', handleKeyDown);
                }
            })["TypingArea.useEffect"];
        }
    }["TypingArea.useEffect"], [
        gameStatus,
        handleKeyPress
    ]);
    const getCharClassName = (status)=>{
        switch(status){
            case 'correct':
                return 'text-success bg-success-soft';
            case 'incorrect':
                return 'text-error bg-error-soft';
            case 'current':
                return 'bg-primary text-primary-foreground animate-pulse border-l-2 border-primary';
            default:
                return 'text-muted-foreground';
        }
    };
    // Component to render the appropriate typing display based on mode
    const TypingDisplay = ()=>{
        if (testConfig.mode === 'time') {
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(TimeModePastedComponent, {}, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                lineNumber: 98,
                columnNumber: 14
            }, this);
        } else {
            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(StandardTypingDisplay, {}, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                lineNumber: 100,
                columnNumber: 14
            }, this);
        }
    };
    // Optimized auto-scrolling display for time mode
    const TimeModePastedComponent = ()=>{
        _s1();
        const { lines, lineCharOffsets, scrollOffset } = textWindow;
        // Get word tracking state
        const currentWordIndex = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
            "TypingArea.TimeModePastedComponent.useGameStore[currentWordIndex]": (state)=>state.currentWordIndex
        }["TypingArea.TimeModePastedComponent.useGameStore[currentWordIndex]"]);
        const wordBoundaries = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
            "TypingArea.TimeModePastedComponent.useGameStore[wordBoundaries]": (state)=>state.wordBoundaries
        }["TypingArea.TimeModePastedComponent.useGameStore[wordBoundaries]"]);
        // Simple, performant scrolling - no complex interpolation needed
        // The store handles the timing, we just smoothly animate the transition
        // Buffer rendering to prevent content popping
        const renderBuffer = 2;
        const startIndex = Math.max(0, scrollOffset - renderBuffer);
        const endIndex = Math.min(lines.length, scrollOffset + 3 + renderBuffer);
        const linesToRender = lines.slice(startIndex, endIndex);
        // Calculate current word boundaries
        const { start: wordStart, end: wordEnd } = getCurrentWordBounds(currentWordIndex, wordBoundaries, charStates.length);
        // Memoize the line rendering for performance
        const renderLineWithCharacterStates = react__WEBPACK_IMPORTED_MODULE_2___default().useMemo({
            "TypingArea.TimeModePastedComponent.useMemo[renderLineWithCharacterStates]": ()=>{
                return ({
                    "TypingArea.TimeModePastedComponent.useMemo[renderLineWithCharacterStates]": (line, lineIndex)=>{
                        const globalLineIndex = startIndex + lineIndex;
                        const lineStartChar = lineCharOffsets[globalLineIndex] || 0;
                        return line.split('').map({
                            "TypingArea.TimeModePastedComponent.useMemo[renderLineWithCharacterStates]": (char, charIndex)=>{
                                const globalCharIndex = lineStartChar + charIndex;
                                const charState = charStates[globalCharIndex];
                                if (!charState) return null;
                                const isInCurrentWord = globalCharIndex >= wordStart && globalCharIndex < wordEnd && char !== ' ';
                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("span", {
                                    className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_12__.cn)('transition-colors duration-150', getCharClassName(charState.status), isInCurrentWord && 'bg-primary/10 dark:bg-primary/15'),
                                    children: char === ' ' ? '\u00A0' : char
                                }, `${globalLineIndex}-${charIndex}`, false, {
                                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                                    lineNumber: 146,
                                    columnNumber: 13
                                }, this);
                            }
                        }["TypingArea.TimeModePastedComponent.useMemo[renderLineWithCharacterStates]"]);
                    }
                })["TypingArea.TimeModePastedComponent.useMemo[renderLineWithCharacterStates]"];
            }
        }["TypingArea.TimeModePastedComponent.useMemo[renderLineWithCharacterStates]"], [
            lineCharOffsets,
            startIndex,
            charStates,
            wordStart,
            wordEnd
        ]);
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
            className: "typing-container relative",
            children: [
                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                    className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_12__.cn)('overflow-hidden', // Responsive height
                    isMobile ? 'h-20' : 'h-24'),
                    role: "textbox",
                    "aria-multiline": "true",
                    "aria-describedby": "typing-instructions game-status-live",
                    tabIndex: 0,
                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_12__.cn)('font-mono leading-8', // Responsive text size
                        isMobile ? 'text-base' : 'text-lg sm:text-xl'),
                        style: {
                            transform: `translateY(-${(scrollOffset - startIndex) * (isMobile ? 28 : 32)}px)`,
                            transition: 'transform 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94)',
                            willChange: 'transform'
                        },
                        children: linesToRender.map((line, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                                className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_12__.cn)('leading-8', isMobile ? 'min-h-[28px]' : 'min-h-[32px]'),
                                role: "textbox",
                                "aria-label": `Line ${startIndex + index + 1}`,
                                children: renderLineWithCharacterStates(line, index)
                            }, `line-${startIndex + index}`, false, {
                                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                                lineNumber: 188,
                                columnNumber: 15
                            }, this))
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                        lineNumber: 175,
                        columnNumber: 11
                    }, this)
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                    lineNumber: 164,
                    columnNumber: 9
                }, this),
                (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
                    "TypingArea.TimeModePastedComponent.useGameStore": (state)=>state.isContentStreaming
                }["TypingArea.TimeModePastedComponent.useGameStore"]) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                    className: "text-info absolute top-0 right-0 animate-pulse text-xs",
                    children: "Loading more content..."
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                    lineNumber: 205,
                    columnNumber: 11
                }, this),
                gameStatus === 'ready' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("p", {
                    className: "text-muted-foreground mt-6 text-center text-sm",
                    children: "Start typing to begin the test..."
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                    lineNumber: 211,
                    columnNumber: 11
                }, this),
                gameStatus === 'paused' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("p", {
                    className: "text-warning mt-6 text-center text-sm font-medium",
                    children: "Test paused - continue typing to resume"
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                    lineNumber: 217,
                    columnNumber: 11
                }, this)
            ]
        }, void 0, true, {
            fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
            lineNumber: 162,
            columnNumber: 7
        }, this);
    };
    _s1(TimeModePastedComponent, "cKWpn3FXRLZiaVfDHJhzXEZd6gw=", false, function() {
        return [
            _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
            _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
            _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore
        ];
    });
    // Standard display for words and quote modes
    const StandardTypingDisplay = ()=>{
        _s2();
        // Get word tracking state
        const currentWordIndex = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
            "TypingArea.StandardTypingDisplay.useGameStore[currentWordIndex]": (state)=>state.currentWordIndex
        }["TypingArea.StandardTypingDisplay.useGameStore[currentWordIndex]"]);
        const wordBoundaries = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
            "TypingArea.StandardTypingDisplay.useGameStore[wordBoundaries]": (state)=>state.wordBoundaries
        }["TypingArea.StandardTypingDisplay.useGameStore[wordBoundaries]"]);
        // Calculate current word boundaries
        const { start, end } = getCurrentWordBounds(currentWordIndex, wordBoundaries, charStates.length);
        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
            className: "typing-container relative",
            children: [
                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                    className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_12__.cn)('w-full font-mono leading-relaxed tracking-wide break-words focus:outline-none', // Responsive text size and spacing
                    isMobile ? 'min-h-[150px] text-base' : 'min-h-[200px] text-lg sm:text-xl lg:text-2xl'),
                    role: "textbox",
                    "aria-multiline": "true",
                    "aria-describedby": "typing-instructions game-status-live",
                    tabIndex: 0,
                    children: charStates.map((charState, index)=>{
                        const isInCurrentWord = index >= start && index < end && charState.char !== ' ';
                        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("span", {
                            className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_12__.cn)('transition-colors duration-150', getCharClassName(charState.status), isInCurrentWord && 'bg-primary/10 dark:bg-primary/15'),
                            "aria-label": charState.status === 'current' ? 'Current character' : undefined,
                            children: charState.char === ' ' ? '\u00A0' : charState.char
                        }, index, false, {
                            fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                            lineNumber: 258,
                            columnNumber: 15
                        }, this);
                    })
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                    lineNumber: 240,
                    columnNumber: 9
                }, this),
                gameStatus === 'ready' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("p", {
                    className: "text-muted-foreground mt-6 text-center text-sm",
                    children: "Start typing to begin the test..."
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                    lineNumber: 278,
                    columnNumber: 11
                }, this),
                gameStatus === 'paused' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("p", {
                    className: "text-warning mt-6 text-center text-sm font-medium",
                    children: "Test paused - continue typing to resume"
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                    lineNumber: 284,
                    columnNumber: 11
                }, this)
            ]
        }, void 0, true, {
            fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
            lineNumber: 239,
            columnNumber: 7
        }, this);
    };
    _s2(StandardTypingDisplay, "9bMJsh5pJuTQlnKV67sUUuCi3uw=", false, function() {
        return [
            _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
            _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore
        ];
    });
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_12__.cn)('mx-auto w-full max-w-5xl space-y-6', // Mobile optimizations
        isMobile && 'space-y-4 px-4', hasVirtualKeyboard && 'pb-4'),
        children: [
            testConfig.mode === 'time' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "flex justify-center",
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_TimerDisplay__WEBPACK_IMPORTED_MODULE_7__.TimerDisplay, {}, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                    lineNumber: 304,
                    columnNumber: 11
                }, this)
            }, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                lineNumber: 303,
                columnNumber: 9
            }, this),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_WordsProgress__WEBPACK_IMPORTED_MODULE_9__.WordsProgress, {}, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                lineNumber: 309,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "w-full",
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                    className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_12__.cn)('bg-card focus-within:ring-ring rounded-lg border focus-within:ring-2', // Responsive padding
                    isMobile ? 'p-4' : 'p-6 sm:p-8', // Touch optimizations
                    isTouchDevice && 'touch-manipulation'),
                    role: "main",
                    "aria-label": "Typing practice area",
                    children: [
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                            id: "typing-instructions",
                            className: "sr-only",
                            children: [
                                testConfig.mode === 'time' ? `Type the text shown to practice your typing speed. Timer: ${testConfig.duration} seconds.` : testConfig.mode === 'words' ? `Type ${testConfig.wordCount} words as quickly and accurately as possible.` : 'Type the quote shown as quickly and accurately as possible.',
                                ' ',
                                "Use backspace to correct mistakes. Press Escape to open the command palette. Current difficulty: ",
                                testConfig.difficulty,
                                "."
                            ]
                        }, void 0, true, {
                            fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                            lineNumber: 325,
                            columnNumber: 11
                        }, this),
                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                            id: "game-status-live",
                            className: "sr-only",
                            "aria-live": "polite",
                            "aria-atomic": "false",
                            children: [
                                gameStatus === 'ready' && 'Ready to start typing',
                                gameStatus === 'running' && 'Test in progress',
                                gameStatus === 'paused' && 'Test paused',
                                gameStatus === 'finished' && 'Test completed'
                            ]
                        }, void 0, true, {
                            fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                            lineNumber: 336,
                            columnNumber: 11
                        }, this),
                        isPreparingGame ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_LoadingState__WEBPACK_IMPORTED_MODULE_5__.LoadingState, {
                            message: "Preparing your typing challenge...",
                            variant: "preparing"
                        }, void 0, false, {
                            fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                            lineNumber: 349,
                            columnNumber: 13
                        }, this) : gamePreparationError ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_ErrorState__WEBPACK_IMPORTED_MODULE_6__.ErrorState, {
                            error: `Game preparation failed: ${gamePreparationError}`,
                            onRetry: prepareGame,
                            onFallback: useFallbackWords
                        }, void 0, false, {
                            fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                            lineNumber: 354,
                            columnNumber: 13
                        }, this) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(TypingDisplay, {}, void 0, false, {
                            fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                            lineNumber: 360,
                            columnNumber: 13
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                    lineNumber: 313,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                lineNumber: 312,
                columnNumber: 7
            }, this),
            gameStatus === 'running' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "flex justify-center",
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_LiveStats__WEBPACK_IMPORTED_MODULE_8__.LiveStats, {}, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                    lineNumber: 368,
                    columnNumber: 11
                }, this)
            }, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                lineNumber: 367,
                columnNumber: 9
            }, this),
            gameStatus === 'finished' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(_ResultsCard__WEBPACK_IMPORTED_MODULE_4__.ResultsCard, {}, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
                lineNumber: 373,
                columnNumber: 37
            }, this)
        ]
    }, void 0, true, {
        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/TypingArea.tsx",
        lineNumber: 293,
        columnNumber: 5
    }, this);
}
_s(TypingArea, "qEhtvAwDmkVM4H7G/mK53JvIbY4=", false, function() {
    return [
        _hooks_useTimerCleanup__WEBPACK_IMPORTED_MODULE_10__.useTimerCleanup,
        _hooks_useTimerCleanup__WEBPACK_IMPORTED_MODULE_10__.useTimerVisibility,
        _hooks_useDeviceDetection__WEBPACK_IMPORTED_MODULE_11__.useDeviceDetection,
        _hooks_useDeviceDetection__WEBPACK_IMPORTED_MODULE_11__.useVirtualKeyboard,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore
    ];
});
_c = TypingArea;
TypingArea.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "TypingArea"
};
var _c;
__webpack_require__.$Refresh$.register(_c, "TypingArea");


const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ }),

/***/ "./src/components/game/WordsProgress.tsx":
/*!***********************************************!*\
  !*** ./src/components/game/WordsProgress.tsx ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CompactWordsProgress: () => (/* binding */ CompactWordsProgress),
/* harmony export */   WordsProgress: () => (/* binding */ WordsProgress)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "../../node_modules/next/dist/compiled/react/jsx-dev-runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "../../node_modules/next/dist/compiled/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/store/useGameStore */ "./src/store/useGameStore.ts");
/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/utils */ "./src/lib/utils.ts");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));


var _s = __webpack_require__.$Refresh$.signature(), _s1 = __webpack_require__.$Refresh$.signature();
'use client';



function WordsProgress() {
    _s();
    const testConfig = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "WordsProgress.useGameStore[testConfig]": (state)=>state.testConfig
    }["WordsProgress.useGameStore[testConfig]"]);
    const wordsCompleted = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "WordsProgress.useGameStore[wordsCompleted]": (state)=>state.wordsCompleted
    }["WordsProgress.useGameStore[wordsCompleted]"]);
    const wordsProgress = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "WordsProgress.useGameStore[wordsProgress]": (state)=>state.wordsProgress
    }["WordsProgress.useGameStore[wordsProgress]"]);
    const targetWordCount = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "WordsProgress.useGameStore[targetWordCount]": (state)=>state.targetWordCount
    }["WordsProgress.useGameStore[targetWordCount]"]);
    const gameStatus = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "WordsProgress.useGameStore[gameStatus]": (state)=>state.gameStatus
    }["WordsProgress.useGameStore[gameStatus]"]);
    // Only show for words mode
    if (testConfig.mode !== 'words') return null;
    // Don't show if game hasn't started
    if (gameStatus === 'idle' || gameStatus === 'ready') return null;
    const isNearCompletion = wordsProgress >= 80;
    const isAlmostDone = wordsProgress >= 90;
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
        className: "mx-auto w-full max-w-lg",
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "mb-2 flex items-center justify-between text-sm",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("span", {
                        className: "text-muted-foreground",
                        children: "Progress"
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                        lineNumber: 26,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("span", {
                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('text-xs font-medium sm:text-sm', isAlmostDone && 'text-success', isNearCompletion && !isAlmostDone && 'text-info'),
                        children: [
                            wordsCompleted,
                            "/",
                            targetWordCount,
                            " words"
                        ]
                    }, void 0, true, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                        lineNumber: 27,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                lineNumber: 25,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "bg-muted relative h-3 overflow-hidden rounded-full",
                children: [
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('absolute inset-y-0 left-0 rounded-full transition-all duration-300 ease-out', 'bg-primary', isAlmostDone && 'bg-success', isNearCompletion && !isAlmostDone && 'bg-info'),
                        style: {
                            width: `${wordsProgress}%`
                        },
                        children: isNearCompletion && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                            className: "animate-shimmer absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent"
                        }, void 0, false, {
                            fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                            lineNumber: 50,
                            columnNumber: 13
                        }, this)
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                        lineNumber: 39,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                        className: "absolute inset-0 flex justify-between px-1",
                        children: [
                            25,
                            50,
                            75
                        ].map((milestone)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                                className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('bg-border/50 h-full w-0.5 transition-opacity', wordsProgress >= milestone && 'opacity-50'),
                                style: {
                                    marginLeft: `${milestone}%`
                                }
                            }, milestone, false, {
                                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                                lineNumber: 57,
                                columnNumber: 13
                            }, this))
                    }, void 0, false, {
                        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                        lineNumber: 55,
                        columnNumber: 9
                    }, this)
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                lineNumber: 38,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "mt-1 text-center",
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("span", {
                    className: "text-muted-foreground text-xs",
                    children: [
                        Math.round(wordsProgress),
                        "% complete"
                    ]
                }, void 0, true, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                    lineNumber: 71,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                lineNumber: 70,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
        lineNumber: 24,
        columnNumber: 5
    }, this);
}
_s(WordsProgress, "5MOM6x/itSv6zdSIvrJmpTNKJrs=", false, function() {
    return [
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore
    ];
});
_c = WordsProgress;
// Compact version for smaller displays
function CompactWordsProgress() {
    _s1();
    const testConfig = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "CompactWordsProgress.useGameStore[testConfig]": (state)=>state.testConfig
    }["CompactWordsProgress.useGameStore[testConfig]"]);
    const wordsCompleted = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "CompactWordsProgress.useGameStore[wordsCompleted]": (state)=>state.wordsCompleted
    }["CompactWordsProgress.useGameStore[wordsCompleted]"]);
    const targetWordCount = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "CompactWordsProgress.useGameStore[targetWordCount]": (state)=>state.targetWordCount
    }["CompactWordsProgress.useGameStore[targetWordCount]"]);
    const wordsProgress = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "CompactWordsProgress.useGameStore[wordsProgress]": (state)=>state.wordsProgress
    }["CompactWordsProgress.useGameStore[wordsProgress]"]);
    const gameStatus = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore)({
        "CompactWordsProgress.useGameStore[gameStatus]": (state)=>state.gameStatus
    }["CompactWordsProgress.useGameStore[gameStatus]"]);
    if (testConfig.mode !== 'words' || gameStatus === 'idle' || gameStatus === 'ready') {
        return null;
    }
    const isNearCompletion = wordsProgress >= 80;
    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('inline-flex items-center gap-2 rounded-full border px-3 py-1 text-sm', 'border-muted-foreground/20', isNearCompletion && 'border-success/20 text-success'),
        children: [
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                className: "bg-muted relative h-1.5 w-16 overflow-hidden rounded-full",
                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
                    className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)('absolute inset-y-0 left-0 rounded-full transition-all duration-300', 'bg-primary', isNearCompletion && 'bg-success'),
                    style: {
                        width: `${wordsProgress}%`
                    }
                }, void 0, false, {
                    fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                    lineNumber: 106,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                lineNumber: 105,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("span", {
                className: "font-mono",
                children: [
                    wordsCompleted,
                    "/",
                    targetWordCount
                ]
            }, void 0, true, {
                fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
                lineNumber: 115,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "/home/juhnk/repos/type/packages/web/src/components/game/WordsProgress.tsx",
        lineNumber: 98,
        columnNumber: 5
    }, this);
}
_s1(CompactWordsProgress, "dacRtJlBQgNg1Aux/Kpcy0SPVIg=", false, function() {
    return [
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore,
        _store_useGameStore__WEBPACK_IMPORTED_MODULE_3__.useGameStore
    ];
});
_c1 = CompactWordsProgress;
WordsProgress.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "WordsProgress"
};
CompactWordsProgress.__docgenInfo = {
    "description": "",
    "methods": [],
    "displayName": "CompactWordsProgress"
};
var _c, _c1;
__webpack_require__.$Refresh$.register(_c, "WordsProgress");
__webpack_require__.$Refresh$.register(_c1, "CompactWordsProgress");


const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ }),

/***/ "./src/hooks/useDeviceDetection.ts":
/*!*****************************************!*\
  !*** ./src/hooks/useDeviceDetection.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useDeviceDetection: () => (/* binding */ useDeviceDetection),
/* harmony export */   useResponsiveValue: () => (/* binding */ useResponsiveValue),
/* harmony export */   useVirtualKeyboard: () => (/* binding */ useVirtualKeyboard)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "../../node_modules/next/dist/compiled/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));

'use client';

function useDeviceDetection() {
    const [deviceInfo, setDeviceInfo] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({
        isMobile: false,
        isTablet: false,
        isDesktop: true,
        isTouchDevice: false,
        screenWidth: 1024,
        userAgent: ''
    });
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({
        "useDeviceDetection.useEffect": ()=>{
            const updateDeviceInfo = {
                "useDeviceDetection.useEffect.updateDeviceInfo": ()=>{
                    const width = window.innerWidth;
                    const userAgent = navigator.userAgent;
                    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
                    // Breakpoints based on common standards
                    const isMobile = width < 768;
                    const isTablet = width >= 768 && width < 1024;
                    const isDesktop = width >= 1024;
                    setDeviceInfo({
                        isMobile,
                        isTablet,
                        isDesktop,
                        isTouchDevice,
                        screenWidth: width,
                        userAgent
                    });
                }
            }["useDeviceDetection.useEffect.updateDeviceInfo"];
            // Initial detection
            updateDeviceInfo();
            // Listen for resize events
            window.addEventListener('resize', updateDeviceInfo);
            // Listen for orientation changes on mobile
            window.addEventListener('orientationchange', {
                "useDeviceDetection.useEffect": ()=>{
                    // Small delay to ensure the viewport has updated
                    setTimeout(updateDeviceInfo, 100);
                }
            }["useDeviceDetection.useEffect"]);
            return ({
                "useDeviceDetection.useEffect": ()=>{
                    window.removeEventListener('resize', updateDeviceInfo);
                    window.removeEventListener('orientationchange', updateDeviceInfo);
                }
            })["useDeviceDetection.useEffect"];
        }
    }["useDeviceDetection.useEffect"], []);
    return deviceInfo;
}
// Additional utility hook for responsive behavior
function useResponsiveValue(mobile, tablet, desktop) {
    const { isMobile, isTablet } = useDeviceDetection();
    if (isMobile) return mobile;
    if (isTablet) return tablet;
    return desktop;
}
// Hook for checking if device has virtual keyboard
function useVirtualKeyboard() {
    const [hasVirtualKeyboard, setHasVirtualKeyboard] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
    const { isMobile, isTablet } = useDeviceDetection();
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({
        "useVirtualKeyboard.useEffect": ()=>{
            if (!isMobile && !isTablet) {
                setHasVirtualKeyboard(false);
                return;
            }
            const handleResize = {
                "useVirtualKeyboard.useEffect.handleResize": ()=>{
                    // On mobile devices, viewport height reduction often indicates virtual keyboard
                    const viewportHeight = window.innerHeight;
                    const screenHeight = window.screen.height;
                    const heightRatio = viewportHeight / screenHeight;
                    // If viewport is significantly smaller than screen, likely virtual keyboard is open
                    setHasVirtualKeyboard(heightRatio < 0.75);
                }
            }["useVirtualKeyboard.useEffect.handleResize"];
            handleResize();
            window.addEventListener('resize', handleResize);
            return ({
                "useVirtualKeyboard.useEffect": ()=>window.removeEventListener('resize', handleResize)
            })["useVirtualKeyboard.useEffect"];
        }
    }["useVirtualKeyboard.useEffect"], [
        isMobile,
        isTablet
    ]);
    return hasVirtualKeyboard;
}


const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ }),

/***/ "./src/hooks/useTimerCleanup.ts":
/*!**************************************!*\
  !*** ./src/hooks/useTimerCleanup.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   useTimerCleanup: () => (/* binding */ useTimerCleanup),
/* harmony export */   useTimerVisibility: () => (/* binding */ useTimerVisibility)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "../../node_modules/next/dist/compiled/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _store_useGameStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/store/useGameStore */ "./src/store/useGameStore.ts");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));



/**
 * Custom hook to handle timer cleanup when component unmounts
 * Prevents memory leaks from lingering timers
 */ function useTimerCleanup() {
    const clearTimer = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_2__.useGameStore)({
        "useTimerCleanup.useGameStore[clearTimer]": (state)=>state.clearTimer
    }["useTimerCleanup.useGameStore[clearTimer]"]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({
        "useTimerCleanup.useEffect": ()=>{
            // Cleanup function runs when component unmounts
            return ({
                "useTimerCleanup.useEffect": ()=>{
                    clearTimer();
                }
            })["useTimerCleanup.useEffect"];
        }
    }["useTimerCleanup.useEffect"], [
        clearTimer
    ]);
}
/**
 * Custom hook to handle page visibility changes
 * Pauses timer when page becomes hidden, resumes when visible
 */ function useTimerVisibility() {
    const gameStatus = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_2__.useGameStore)({
        "useTimerVisibility.useGameStore[gameStatus]": (state)=>state.gameStatus
    }["useTimerVisibility.useGameStore[gameStatus]"]);
    const isTimerRunning = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_2__.useGameStore)({
        "useTimerVisibility.useGameStore[isTimerRunning]": (state)=>state.isTimerRunning
    }["useTimerVisibility.useGameStore[isTimerRunning]"]);
    const pauseTimer = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_2__.useGameStore)({
        "useTimerVisibility.useGameStore[pauseTimer]": (state)=>state.pauseTimer
    }["useTimerVisibility.useGameStore[pauseTimer]"]);
    const startTimer = (0,_store_useGameStore__WEBPACK_IMPORTED_MODULE_2__.useGameStore)({
        "useTimerVisibility.useGameStore[startTimer]": (state)=>state.startTimer
    }["useTimerVisibility.useGameStore[startTimer]"]);
    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({
        "useTimerVisibility.useEffect": ()=>{
            const handleVisibilityChange = {
                "useTimerVisibility.useEffect.handleVisibilityChange": ()=>{
                    if (gameStatus === 'running') {
                        if (document.hidden && isTimerRunning) {
                            // Page became hidden, pause timer
                            pauseTimer();
                        } else if (!document.hidden && !isTimerRunning) {
                            // Page became visible, resume timer
                            startTimer();
                        }
                    }
                }
            }["useTimerVisibility.useEffect.handleVisibilityChange"];
            document.addEventListener('visibilitychange', handleVisibilityChange);
            return ({
                "useTimerVisibility.useEffect": ()=>{
                    document.removeEventListener('visibilitychange', handleVisibilityChange);
                }
            })["useTimerVisibility.useEffect"];
        }
    }["useTimerVisibility.useEffect"], [
        gameStatus,
        isTimerRunning,
        pauseTimer,
        startTimer
    ]);
}


const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ }),

/***/ "./src/stories/components/game/TypingArea.stories.tsx":
/*!************************************************************!*\
  !*** ./src/stories/components/game/TypingArea.stories.tsx ***!
  \************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActiveTypingTimeMode: () => (/* binding */ ActiveTypingTimeMode),
/* harmony export */   BackspaceArtifacts: () => (/* binding */ BackspaceArtifacts),
/* harmony export */   BlockCaret: () => (/* binding */ BlockCaret),
/* harmony export */   CharacterStateBugs: () => (/* binding */ CharacterStateBugs),
/* harmony export */   Completed: () => (/* binding */ Completed),
/* harmony export */   DarkMode: () => (/* binding */ DarkMode),
/* harmony export */   EdgeCaseStates: () => (/* binding */ EdgeCaseStates),
/* harmony export */   InvisibleCorrectCharacters: () => (/* binding */ InvisibleCorrectCharacters),
/* harmony export */   Ready: () => (/* binding */ Ready),
/* harmony export */   UnderlineCaret: () => (/* binding */ UnderlineCaret),
/* harmony export */   VisualRegressionTest: () => (/* binding */ VisualRegressionTest),
/* harmony export */   WithErrors: () => (/* binding */ WithErrors),
/* harmony export */   WordsMode: () => (/* binding */ WordsMode),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var _components_game_TypingArea__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/game/TypingArea */ "./src/components/game/TypingArea.tsx");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));


const meta = {
  title: 'Components/Game/TypingArea',
  component: _components_game_TypingArea__WEBPACK_IMPORTED_MODULE_1__.TypingArea,
  parameters: {
    layout: 'padded',
    docs: {
      description: {
        component: 'The main typing interface where users practice their typing skills.'
      }
    }
  },
  tags: ['game', 'interactive', 'autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
// Helper to set up game state
const setupGameState = (overrides = {}) => {
  const text = 'The quick brown fox jumps over the lazy dog';
  const charStates = text.split('').map((char, index) => ({
    char,
    status: 'default',
    index
  }));
  return {
    textToType: text,
    charStates,
    wordBoundaries: [0, 4, 10, 16, 20, 26, 31, 35, 40],
    ...overrides
  };
};
// Ready state
const Ready = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState(),
        gameStatus: 'ready',
        testConfig: {
          mode: 'time',
          duration: 60,
          wordCount: 50,
          difficulty: 'Normal',
          textSource: 'english1k',
          punctuation: false
        }
      }
    }
  }
};
// Active typing - time mode
const ActiveTypingTimeMode = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [{
            char: 'T',
            status: 'correct',
            index: 0
          }, {
            char: 'h',
            status: 'correct',
            index: 1
          }, {
            char: 'e',
            status: 'correct',
            index: 2
          }, {
            char: ' ',
            status: 'correct',
            index: 3
          }, {
            char: 'q',
            status: 'correct',
            index: 4
          }, {
            char: 'u',
            status: 'current',
            index: 5
          }, {
            char: 'i',
            status: 'default',
            index: 6
          }, {
            char: 'c',
            status: 'default',
            index: 7
          }, {
            char: 'k',
            status: 'default',
            index: 8
          }, ...Array(34).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),
            status: 'default',
            index: i + 9
          }))],
          currentWordIndex: 1,
          userInput: 'The q'
        }),
        gameStatus: 'running',
        timeRemaining: 45000,
        stats: {
          wpm: 42,
          rawWpm: 45,
          accuracy: 96.5,
          correctChars: 5,
          incorrectChars: 0,
          totalChars: 5
        },
        testConfig: {
          mode: 'time',
          duration: 60
        }
      }
    },
    docs: {
      description: {
        story: 'Active typing session in time mode with live statistics'
      }
    }
  }
};
// Words mode
const WordsMode = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState(),
        gameStatus: 'running',
        wordsCompleted: 3,
        targetWordCount: 25,
        wordsProgress: 12,
        testConfig: {
          mode: 'words',
          wordCount: 25
        }
      }
    },
    docs: {
      description: {
        story: 'Words mode with progress indicator'
      }
    }
  }
};
// With errors
const WithErrors = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [{
            char: 'T',
            status: 'correct',
            index: 0
          }, {
            char: 'h',
            status: 'correct',
            index: 1
          }, {
            char: 'e',
            status: 'correct',
            index: 2
          }, {
            char: ' ',
            status: 'correct',
            index: 3
          }, {
            char: 'q',
            status: 'incorrect',
            index: 4
          }, {
            char: 'u',
            status: 'incorrect',
            index: 5
          }, {
            char: 'i',
            status: 'current',
            index: 6
          }, ...Array(36).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 7),
            status: 'default',
            index: i + 7
          }))]
        }),
        gameStatus: 'running',
        stats: {
          wpm: 38,
          rawWpm: 42,
          accuracy: 85.7,
          correctChars: 4,
          incorrectChars: 2,
          totalChars: 6
        }
      }
    },
    docs: {
      description: {
        story: 'Typing with some errors highlighted in red'
      }
    }
  }
};
// Completed test
const Completed = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: Array(43).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i),
            status: 'correct',
            index: i
          }))
        }),
        gameStatus: 'finished',
        stats: {
          wpm: 72,
          rawWpm: 75,
          accuracy: 98.5,
          correctChars: 43,
          incorrectChars: 1,
          totalChars: 44,
          duration: 30000
        }
      }
    },
    docs: {
      description: {
        story: 'Completed typing test showing results'
      }
    }
  }
};
// Dark mode
const DarkMode = {
  ...Ready,
  globals: {
    theme: 'dark'
  }
};
// Different caret styles
const BlockCaret = {
  parameters: {
    mockStore: {
      game: setupGameState(),
      settings: {
        settings: {
          appearance: {
            caretStyle: 'block'
          }
        }
      }
    }
  }
};
const UnderlineCaret = {
  parameters: {
    mockStore: {
      game: setupGameState(),
      settings: {
        settings: {
          appearance: {
            caretStyle: 'underline'
          }
        }
      }
    }
  }
};
// === BUG REPRODUCTION STORIES ===
// These stories are specifically designed to isolate and reproduce visual bugs
// Bug Test: Character styling for correct/incorrect states
const CharacterStateBugs = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [{
            char: 'T',
            status: 'correct',
            index: 0
          }, {
            char: 'h',
            status: 'correct',
            index: 1
          }, {
            char: 'e',
            status: 'incorrect',
            index: 2
          }, {
            char: ' ',
            status: 'incorrect',
            index: 3
          }, {
            char: 'q',
            status: 'correct',
            index: 4
          }, {
            char: 'u',
            status: 'incorrect',
            index: 5
          }, {
            char: 'i',
            status: 'current',
            index: 6
          }, {
            char: 'c',
            status: 'default',
            index: 7
          }, {
            char: 'k',
            status: 'default',
            index: 8
          }, ...Array(34).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),
            status: 'default',
            index: i + 9
          }))]
        }),
        gameStatus: 'running',
        testConfig: {
          mode: 'time',
          duration: 60,
          wordCount: 50,
          difficulty: 'Normal',
          textSource: 'english1k',
          punctuation: false
        }
      }
    },
    docs: {
      description: {
        story: 'Bug test: Mixed correct/incorrect character states should display with proper colors. Green for correct, red for incorrect, highlighted for current.'
      }
    }
  }
};
// Bug Test: Backspace artifacts and state reset issues
const BackspaceArtifacts = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [{
            char: 'T',
            status: 'correct',
            index: 0
          }, {
            char: 'h',
            status: 'correct',
            index: 1
          }, {
            char: 'e',
            status: 'correct',
            index: 2
          }, {
            char: ' ',
            status: 'correct',
            index: 3
          }, {
            char: 'q',
            status: 'incorrect',
            index: 4
          }, {
            char: 'u',
            status: 'current',
            index: 5
          }, {
            char: 'i',
            status: 'default',
            index: 6
          }, {
            char: 'c',
            status: 'default',
            index: 7
          }, {
            char: 'k',
            status: 'default',
            index: 8
          }, ...Array(34).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),
            status: 'default',
            index: i + 9
          }))],
          userInput: 'The x'
        }),
        gameStatus: 'running',
        testConfig: {
          mode: 'time',
          duration: 60
        }
      }
    },
    docs: {
      description: {
        story: 'Bug test: After backspace, character states should reset properly. Index 4 shows incorrect state (from wrong typing), index 5 should be current position after backspace.'
      }
    }
  }
};
// Bug Test: All character states in sequence for visual verification
const VisualRegressionTest = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [
          // Correct sequence
          {
            char: 'C',
            status: 'correct',
            index: 0
          }, {
            char: 'o',
            status: 'correct',
            index: 1
          }, {
            char: 'r',
            status: 'correct',
            index: 2
          }, {
            char: 'r',
            status: 'correct',
            index: 3
          }, {
            char: 'e',
            status: 'correct',
            index: 4
          }, {
            char: 'c',
            status: 'correct',
            index: 5
          }, {
            char: 't',
            status: 'correct',
            index: 6
          }, {
            char: ' ',
            status: 'correct',
            index: 7
          },
          // Incorrect sequence
          {
            char: 'I',
            status: 'incorrect',
            index: 8
          }, {
            char: 'n',
            status: 'incorrect',
            index: 9
          }, {
            char: 'c',
            status: 'incorrect',
            index: 10
          }, {
            char: 'o',
            status: 'incorrect',
            index: 11
          }, {
            char: 'r',
            status: 'incorrect',
            index: 12
          }, {
            char: 'r',
            status: 'incorrect',
            index: 13
          }, {
            char: 'e',
            status: 'incorrect',
            index: 14
          }, {
            char: 'c',
            status: 'incorrect',
            index: 15
          }, {
            char: 't',
            status: 'incorrect',
            index: 16
          }, {
            char: ' ',
            status: 'incorrect',
            index: 17
          },
          // Current position
          {
            char: 'C',
            status: 'current',
            index: 18
          },
          // Default/untyped
          {
            char: 'u',
            status: 'default',
            index: 19
          }, {
            char: 'r',
            status: 'default',
            index: 20
          }, {
            char: 'r',
            status: 'default',
            index: 21
          }, {
            char: 'e',
            status: 'default',
            index: 22
          }, {
            char: 'n',
            status: 'default',
            index: 23
          }, {
            char: 't',
            status: 'default',
            index: 24
          }]
        }),
        gameStatus: 'running',
        testConfig: {
          mode: 'words',
          wordCount: 25
        }
      }
    },
    docs: {
      description: {
        story: 'Visual regression test: All character states displayed in sequence. Use this to verify styling consistency across all states.'
      }
    }
  }
};
// Bug Test: Edge case with rapid state transitions
const EdgeCaseStates = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [
          // Mix of states that might cause rendering issues
          {
            char: 'E',
            status: 'correct',
            index: 0
          }, {
            char: 'd',
            status: 'incorrect',
            index: 1
          }, {
            char: 'g',
            status: 'correct',
            index: 2
          }, {
            char: 'e',
            status: 'incorrect',
            index: 3
          }, {
            char: ' ',
            status: 'current',
            index: 4
          }, {
            char: 'c',
            status: 'default',
            index: 5
          }, {
            char: 'a',
            status: 'correct',
            index: 6
          }, {
            char: 's',
            status: 'incorrect',
            index: 7
          }, {
            char: 'e',
            status: 'current',
            index: 8
          }, {
            char: 's',
            status: 'default',
            index: 9
          }, ...Array(33).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 10),
            status: 'default',
            index: i + 10
          }))]
        }),
        gameStatus: 'running',
        testConfig: {
          mode: 'time',
          duration: 30
        }
      }
    },
    docs: {
      description: {
        story: 'Edge case test: Unusual state combinations that might cause visual glitches. Tests rapid transitions and potentially invalid state combinations.'
      }
    }
  }
};
// Bug Test: Invisible correct characters issue
const InvisibleCorrectCharacters = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [
          // These should be clearly visible with green styling
          {
            char: 'T',
            status: 'correct',
            index: 0
          }, {
            char: 'h',
            status: 'correct',
            index: 1
          }, {
            char: 'e',
            status: 'correct',
            index: 2
          }, {
            char: 's',
            status: 'correct',
            index: 3
          }, {
            char: 'e',
            status: 'correct',
            index: 4
          }, {
            char: ' ',
            status: 'correct',
            index: 5
          }, {
            char: 's',
            status: 'correct',
            index: 6
          }, {
            char: 'h',
            status: 'correct',
            index: 7
          }, {
            char: 'o',
            status: 'correct',
            index: 8
          }, {
            char: 'u',
            status: 'correct',
            index: 9
          }, {
            char: 'l',
            status: 'correct',
            index: 10
          }, {
            char: 'd',
            status: 'correct',
            index: 11
          }, {
            char: ' ',
            status: 'correct',
            index: 12
          }, {
            char: 'b',
            status: 'correct',
            index: 13
          }, {
            char: 'e',
            status: 'correct',
            index: 14
          }, {
            char: ' ',
            status: 'correct',
            index: 15
          }, {
            char: 'g',
            status: 'correct',
            index: 16
          }, {
            char: 'r',
            status: 'correct',
            index: 17
          }, {
            char: 'e',
            status: 'correct',
            index: 18
          }, {
            char: 'e',
            status: 'correct',
            index: 19
          }, {
            char: 'n',
            status: 'current',
            index: 20
          }, ...Array(22).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 21),
            status: 'default',
            index: i + 21
          }))]
        }),
        gameStatus: 'running',
        testConfig: {
          mode: 'time',
          duration: 60
        }
      }
    },
    docs: {
      description: {
        story: 'Bug test: Many consecutive correct characters. If styling is broken, these may appear unstyled/invisible instead of green.'
      }
    }
  }
};
;
const __namedExportsOrder = ["Ready", "ActiveTypingTimeMode", "WordsMode", "WithErrors", "Completed", "DarkMode", "BlockCaret", "UnderlineCaret", "CharacterStateBugs", "BackspaceArtifacts", "VisualRegressionTest", "EdgeCaseStates", "InvisibleCorrectCharacters"];
Ready.parameters = {
  ...Ready.parameters,
  docs: {
    ...Ready.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState(),\n        gameStatus: 'ready',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          wordCount: 50,\n          difficulty: 'Normal',\n          textSource: 'english1k',\n          punctuation: false\n        }\n      }\n    }\n  }\n}",
      ...Ready.parameters?.docs?.source
    }
  }
};
ActiveTypingTimeMode.parameters = {
  ...ActiveTypingTimeMode.parameters,
  docs: {
    ...ActiveTypingTimeMode.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [{\n            char: 'T',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'h',\n            status: 'correct',\n            index: 1\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 2\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 3\n          }, {\n            char: 'q',\n            status: 'correct',\n            index: 4\n          }, {\n            char: 'u',\n            status: 'current',\n            index: 5\n          }, {\n            char: 'i',\n            status: 'default',\n            index: 6\n          }, {\n            char: 'c',\n            status: 'default',\n            index: 7\n          }, {\n            char: 'k',\n            status: 'default',\n            index: 8\n          }, ...Array(34).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),\n            status: 'default' as const,\n            index: i + 9\n          }))],\n          currentWordIndex: 1,\n          userInput: 'The q'\n        }),\n        gameStatus: 'running',\n        timeRemaining: 45000,\n        stats: {\n          wpm: 42,\n          rawWpm: 45,\n          accuracy: 96.5,\n          correctChars: 5,\n          incorrectChars: 0,\n          totalChars: 5\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Active typing session in time mode with live statistics'\n      }\n    }\n  }\n}",
      ...ActiveTypingTimeMode.parameters?.docs?.source
    }
  }
};
WordsMode.parameters = {
  ...WordsMode.parameters,
  docs: {
    ...WordsMode.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState(),\n        gameStatus: 'running',\n        wordsCompleted: 3,\n        targetWordCount: 25,\n        wordsProgress: 12,\n        testConfig: {\n          mode: 'words',\n          wordCount: 25\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Words mode with progress indicator'\n      }\n    }\n  }\n}",
      ...WordsMode.parameters?.docs?.source
    }
  }
};
WithErrors.parameters = {
  ...WithErrors.parameters,
  docs: {
    ...WithErrors.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [{\n            char: 'T',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'h',\n            status: 'correct',\n            index: 1\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 2\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 3\n          }, {\n            char: 'q',\n            status: 'incorrect',\n            index: 4\n          }, {\n            char: 'u',\n            status: 'incorrect',\n            index: 5\n          }, {\n            char: 'i',\n            status: 'current',\n            index: 6\n          }, ...Array(36).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 7),\n            status: 'default' as const,\n            index: i + 7\n          }))]\n        }),\n        gameStatus: 'running',\n        stats: {\n          wpm: 38,\n          rawWpm: 42,\n          accuracy: 85.7,\n          correctChars: 4,\n          incorrectChars: 2,\n          totalChars: 6\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Typing with some errors highlighted in red'\n      }\n    }\n  }\n}",
      ...WithErrors.parameters?.docs?.source
    }
  }
};
Completed.parameters = {
  ...Completed.parameters,
  docs: {
    ...Completed.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: Array(43).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i),\n            status: 'correct' as const,\n            index: i\n          }))\n        }),\n        gameStatus: 'finished',\n        stats: {\n          wpm: 72,\n          rawWpm: 75,\n          accuracy: 98.5,\n          correctChars: 43,\n          incorrectChars: 1,\n          totalChars: 44,\n          duration: 30000\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Completed typing test showing results'\n      }\n    }\n  }\n}",
      ...Completed.parameters?.docs?.source
    }
  }
};
DarkMode.parameters = {
  ...DarkMode.parameters,
  docs: {
    ...DarkMode.parameters?.docs,
    source: {
      originalSource: "{\n  ...Ready,\n  globals: {\n    theme: 'dark'\n  }\n}",
      ...DarkMode.parameters?.docs?.source
    }
  }
};
BlockCaret.parameters = {
  ...BlockCaret.parameters,
  docs: {
    ...BlockCaret.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: setupGameState(),\n      settings: {\n        settings: {\n          appearance: {\n            caretStyle: 'block'\n          }\n        }\n      }\n    }\n  }\n}",
      ...BlockCaret.parameters?.docs?.source
    }
  }
};
UnderlineCaret.parameters = {
  ...UnderlineCaret.parameters,
  docs: {
    ...UnderlineCaret.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: setupGameState(),\n      settings: {\n        settings: {\n          appearance: {\n            caretStyle: 'underline'\n          }\n        }\n      }\n    }\n  }\n}",
      ...UnderlineCaret.parameters?.docs?.source
    }
  }
};
CharacterStateBugs.parameters = {
  ...CharacterStateBugs.parameters,
  docs: {
    ...CharacterStateBugs.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [{\n            char: 'T',\n            status: 'correct',\n            index: 0\n          },\n          // Should be green\n          {\n            char: 'h',\n            status: 'correct',\n            index: 1\n          },\n          // Should be green\n          {\n            char: 'e',\n            status: 'incorrect',\n            index: 2\n          },\n          // Should be red\n          {\n            char: ' ',\n            status: 'incorrect',\n            index: 3\n          },\n          // Should be red\n          {\n            char: 'q',\n            status: 'correct',\n            index: 4\n          },\n          // Should be green\n          {\n            char: 'u',\n            status: 'incorrect',\n            index: 5\n          },\n          // Should be red\n          {\n            char: 'i',\n            status: 'current',\n            index: 6\n          },\n          // Should be highlighted\n          {\n            char: 'c',\n            status: 'default',\n            index: 7\n          },\n          // Should be muted\n          {\n            char: 'k',\n            status: 'default',\n            index: 8\n          },\n          // Should be muted\n          ...Array(34).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),\n            status: 'default' as const,\n            index: i + 9\n          }))]\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          wordCount: 50,\n          difficulty: 'Normal',\n          textSource: 'english1k',\n          punctuation: false\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Bug test: Mixed correct/incorrect character states should display with proper colors. Green for correct, red for incorrect, highlighted for current.'\n      }\n    }\n  }\n}",
      ...CharacterStateBugs.parameters?.docs?.source
    }
  }
};
BackspaceArtifacts.parameters = {
  ...BackspaceArtifacts.parameters,
  docs: {
    ...BackspaceArtifacts.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [{\n            char: 'T',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'h',\n            status: 'correct',\n            index: 1\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 2\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 3\n          }, {\n            char: 'q',\n            status: 'incorrect',\n            index: 4\n          },\n          // User typed wrong, then backspaced\n          {\n            char: 'u',\n            status: 'current',\n            index: 5\n          },\n          // Should be current after backspace\n          {\n            char: 'i',\n            status: 'default',\n            index: 6\n          },\n          // Should be clean default\n          {\n            char: 'c',\n            status: 'default',\n            index: 7\n          }, {\n            char: 'k',\n            status: 'default',\n            index: 8\n          }, ...Array(34).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),\n            status: 'default' as const,\n            index: i + 9\n          }))],\n          userInput: 'The x' // Shows that user typed 'x' instead of 'q', then backspaced\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Bug test: After backspace, character states should reset properly. Index 4 shows incorrect state (from wrong typing), index 5 should be current position after backspace.'\n      }\n    }\n  }\n}",
      ...BackspaceArtifacts.parameters?.docs?.source
    }
  }
};
VisualRegressionTest.parameters = {
  ...VisualRegressionTest.parameters,
  docs: {
    ...VisualRegressionTest.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n          // Correct sequence\n          {\n            char: 'C',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'o',\n            status: 'correct',\n            index: 1\n          }, {\n            char: 'r',\n            status: 'correct',\n            index: 2\n          }, {\n            char: 'r',\n            status: 'correct',\n            index: 3\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 4\n          }, {\n            char: 'c',\n            status: 'correct',\n            index: 5\n          }, {\n            char: 't',\n            status: 'correct',\n            index: 6\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 7\n          },\n          // Incorrect sequence\n          {\n            char: 'I',\n            status: 'incorrect',\n            index: 8\n          }, {\n            char: 'n',\n            status: 'incorrect',\n            index: 9\n          }, {\n            char: 'c',\n            status: 'incorrect',\n            index: 10\n          }, {\n            char: 'o',\n            status: 'incorrect',\n            index: 11\n          }, {\n            char: 'r',\n            status: 'incorrect',\n            index: 12\n          }, {\n            char: 'r',\n            status: 'incorrect',\n            index: 13\n          }, {\n            char: 'e',\n            status: 'incorrect',\n            index: 14\n          }, {\n            char: 'c',\n            status: 'incorrect',\n            index: 15\n          }, {\n            char: 't',\n            status: 'incorrect',\n            index: 16\n          }, {\n            char: ' ',\n            status: 'incorrect',\n            index: 17\n          },\n          // Current position\n          {\n            char: 'C',\n            status: 'current',\n            index: 18\n          },\n          // Default/untyped\n          {\n            char: 'u',\n            status: 'default',\n            index: 19\n          }, {\n            char: 'r',\n            status: 'default',\n            index: 20\n          }, {\n            char: 'r',\n            status: 'default',\n            index: 21\n          }, {\n            char: 'e',\n            status: 'default',\n            index: 22\n          }, {\n            char: 'n',\n            status: 'default',\n            index: 23\n          }, {\n            char: 't',\n            status: 'default',\n            index: 24\n          }]\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'words',\n          wordCount: 25\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Visual regression test: All character states displayed in sequence. Use this to verify styling consistency across all states.'\n      }\n    }\n  }\n}",
      ...VisualRegressionTest.parameters?.docs?.source
    }
  }
};
EdgeCaseStates.parameters = {
  ...EdgeCaseStates.parameters,
  docs: {
    ...EdgeCaseStates.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n          // Mix of states that might cause rendering issues\n          {\n            char: 'E',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'd',\n            status: 'incorrect',\n            index: 1\n          }, {\n            char: 'g',\n            status: 'correct',\n            index: 2\n          }, {\n            char: 'e',\n            status: 'incorrect',\n            index: 3\n          }, {\n            char: ' ',\n            status: 'current',\n            index: 4\n          },\n          // Current on space\n          {\n            char: 'c',\n            status: 'default',\n            index: 5\n          }, {\n            char: 'a',\n            status: 'correct',\n            index: 6\n          },\n          // Correct after current\n          {\n            char: 's',\n            status: 'incorrect',\n            index: 7\n          },\n          // Incorrect after correct\n          {\n            char: 'e',\n            status: 'current',\n            index: 8\n          },\n          // Another current (should not happen)\n          {\n            char: 's',\n            status: 'default',\n            index: 9\n          }, ...Array(33).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 10),\n            status: 'default' as const,\n            index: i + 10\n          }))]\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 30\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Edge case test: Unusual state combinations that might cause visual glitches. Tests rapid transitions and potentially invalid state combinations.'\n      }\n    }\n  }\n}",
      ...EdgeCaseStates.parameters?.docs?.source
    }
  }
};
InvisibleCorrectCharacters.parameters = {
  ...InvisibleCorrectCharacters.parameters,
  docs: {
    ...InvisibleCorrectCharacters.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n          // These should be clearly visible with green styling\n          {\n            char: 'T',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'h',\n            status: 'correct',\n            index: 1\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 2\n          }, {\n            char: 's',\n            status: 'correct',\n            index: 3\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 4\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 5\n          }, {\n            char: 's',\n            status: 'correct',\n            index: 6\n          }, {\n            char: 'h',\n            status: 'correct',\n            index: 7\n          }, {\n            char: 'o',\n            status: 'correct',\n            index: 8\n          }, {\n            char: 'u',\n            status: 'correct',\n            index: 9\n          }, {\n            char: 'l',\n            status: 'correct',\n            index: 10\n          }, {\n            char: 'd',\n            status: 'correct',\n            index: 11\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 12\n          }, {\n            char: 'b',\n            status: 'correct',\n            index: 13\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 14\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 15\n          }, {\n            char: 'g',\n            status: 'correct',\n            index: 16\n          }, {\n            char: 'r',\n            status: 'correct',\n            index: 17\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 18\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 19\n          }, {\n            char: 'n',\n            status: 'current',\n            index: 20\n          }, ...Array(22).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 21),\n            status: 'default' as const,\n            index: i + 21\n          }))]\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Bug test: Many consecutive correct characters. If styling is broken, these may appear unstyled/invisible instead of green.'\n      }\n    }\n  }\n}",
      ...InvisibleCorrectCharacters.parameters?.docs?.source
    }
  }
};

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

}]);
//# sourceMappingURL=stories-components-game-TypingArea-stories.iframe.bundle.js.map