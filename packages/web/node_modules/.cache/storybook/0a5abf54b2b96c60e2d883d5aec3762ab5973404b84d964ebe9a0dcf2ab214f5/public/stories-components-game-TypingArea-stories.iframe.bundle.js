"use strict";
(self["webpackChunktype"] = self["webpackChunktype"] || []).push([["stories-components-game-TypingArea-stories"],{

/***/ "./src/stories/components/game/TypingArea.stories.tsx":
/*!************************************************************!*\
  !*** ./src/stories/components/game/TypingArea.stories.tsx ***!
  \************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache;
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActiveTypingTimeMode: () => (/* binding */ ActiveTypingTimeMode),
/* harmony export */   BackspaceArtifacts: () => (/* binding */ BackspaceArtifacts),
/* harmony export */   BlockCaret: () => (/* binding */ BlockCaret),
/* harmony export */   CharacterStateBugs: () => (/* binding */ CharacterStateBugs),
/* harmony export */   Completed: () => (/* binding */ Completed),
/* harmony export */   DarkMode: () => (/* binding */ DarkMode),
/* harmony export */   EdgeCaseStates: () => (/* binding */ EdgeCaseStates),
/* harmony export */   InvisibleCorrectCharacters: () => (/* binding */ InvisibleCorrectCharacters),
/* harmony export */   Ready: () => (/* binding */ Ready),
/* harmony export */   UnderlineCaret: () => (/* binding */ UnderlineCaret),
/* harmony export */   VisualRegressionTest: () => (/* binding */ VisualRegressionTest),
/* harmony export */   WithErrors: () => (/* binding */ WithErrors),
/* harmony export */   WordsMode: () => (/* binding */ WordsMode),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/react-refresh/runtime.js */ "../../node_modules/react-refresh/runtime.js");
/* harmony import */ var _components_game_TypingArea__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/game/TypingArea */ "./src/components/game/TypingArea.tsx");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "../../node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");

__webpack_require__.$Refresh$.runtime = /*#__PURE__*/ (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(_home_juhnk_repos_type_node_modules_react_refresh_runtime_js__WEBPACK_IMPORTED_MODULE_0__, 2)));


const meta = {
  title: 'Components/Game/TypingArea',
  component: _components_game_TypingArea__WEBPACK_IMPORTED_MODULE_1__.TypingArea,
  parameters: {
    layout: 'padded',
    docs: {
      description: {
        component: 'The main typing interface where users practice their typing skills.'
      }
    }
  },
  tags: ['game', 'interactive', 'autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
// Helper to set up game state
const setupGameState = (overrides = {}) => {
  const text = 'The quick brown fox jumps over the lazy dog';
  const charStates = text.split('').map((char, index) => ({
    char,
    status: 'default',
    index
  }));
  return {
    textToType: text,
    charStates,
    wordBoundaries: [0, 4, 10, 16, 20, 26, 31, 35, 40],
    ...overrides
  };
};
// Ready state
const Ready = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState(),
        gameStatus: 'ready',
        testConfig: {
          mode: 'time',
          duration: 60,
          wordCount: 50,
          difficulty: 'Normal',
          textSource: 'english1k',
          punctuation: false
        }
      }
    }
  }
};
// Active typing - time mode
const ActiveTypingTimeMode = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [{
            char: 'T',
            status: 'correct',
            index: 0
          }, {
            char: 'h',
            status: 'correct',
            index: 1
          }, {
            char: 'e',
            status: 'correct',
            index: 2
          }, {
            char: ' ',
            status: 'correct',
            index: 3
          }, {
            char: 'q',
            status: 'correct',
            index: 4
          }, {
            char: 'u',
            status: 'current',
            index: 5
          }, {
            char: 'i',
            status: 'default',
            index: 6
          }, {
            char: 'c',
            status: 'default',
            index: 7
          }, {
            char: 'k',
            status: 'default',
            index: 8
          }, ...Array(34).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),
            status: 'default',
            index: i + 9
          }))],
          currentWordIndex: 1,
          userInput: 'The q'
        }),
        gameStatus: 'running',
        timeRemaining: 45000,
        stats: {
          wpm: 42,
          rawWpm: 45,
          accuracy: 96.5,
          correctChars: 5,
          incorrectChars: 0,
          totalChars: 5
        },
        testConfig: {
          mode: 'time',
          duration: 60
        }
      }
    },
    docs: {
      description: {
        story: 'Active typing session in time mode with live statistics'
      }
    }
  }
};
// Words mode
const WordsMode = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState(),
        gameStatus: 'running',
        wordsCompleted: 3,
        targetWordCount: 25,
        wordsProgress: 12,
        testConfig: {
          mode: 'words',
          wordCount: 25
        }
      }
    },
    docs: {
      description: {
        story: 'Words mode with progress indicator'
      }
    }
  }
};
// With errors
const WithErrors = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [{
            char: 'T',
            status: 'correct',
            index: 0
          }, {
            char: 'h',
            status: 'correct',
            index: 1
          }, {
            char: 'e',
            status: 'correct',
            index: 2
          }, {
            char: ' ',
            status: 'correct',
            index: 3
          }, {
            char: 'q',
            status: 'incorrect',
            index: 4
          }, {
            char: 'u',
            status: 'incorrect',
            index: 5
          }, {
            char: 'i',
            status: 'current',
            index: 6
          }, ...Array(36).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 7),
            status: 'default',
            index: i + 7
          }))]
        }),
        gameStatus: 'running',
        stats: {
          wpm: 38,
          rawWpm: 42,
          accuracy: 85.7,
          correctChars: 4,
          incorrectChars: 2,
          totalChars: 6
        }
      }
    },
    docs: {
      description: {
        story: 'Typing with some errors highlighted in red'
      }
    }
  }
};
// Completed test
const Completed = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: Array(43).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i),
            status: 'correct',
            index: i
          }))
        }),
        gameStatus: 'finished',
        stats: {
          wpm: 72,
          rawWpm: 75,
          accuracy: 98.5,
          correctChars: 43,
          incorrectChars: 1,
          totalChars: 44,
          duration: 30000
        }
      }
    },
    docs: {
      description: {
        story: 'Completed typing test showing results'
      }
    }
  }
};
// Dark mode
const DarkMode = {
  ...Ready,
  globals: {
    theme: 'dark'
  }
};
// Different caret styles
const BlockCaret = {
  parameters: {
    mockStore: {
      game: setupGameState(),
      settings: {
        settings: {
          appearance: {
            caretStyle: 'block'
          }
        }
      }
    }
  }
};
const UnderlineCaret = {
  parameters: {
    mockStore: {
      game: setupGameState(),
      settings: {
        settings: {
          appearance: {
            caretStyle: 'underline'
          }
        }
      }
    }
  }
};
// === BUG REPRODUCTION STORIES ===
// These stories are specifically designed to isolate and reproduce visual bugs
// Bug Test: Character styling for correct/incorrect states
const CharacterStateBugs = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [{
            char: 'T',
            status: 'correct',
            index: 0
          }, {
            char: 'h',
            status: 'correct',
            index: 1
          }, {
            char: 'e',
            status: 'incorrect',
            index: 2
          }, {
            char: ' ',
            status: 'incorrect',
            index: 3
          }, {
            char: 'q',
            status: 'correct',
            index: 4
          }, {
            char: 'u',
            status: 'incorrect',
            index: 5
          }, {
            char: 'i',
            status: 'current',
            index: 6
          }, {
            char: 'c',
            status: 'default',
            index: 7
          }, {
            char: 'k',
            status: 'default',
            index: 8
          }, ...Array(34).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),
            status: 'default',
            index: i + 9
          }))]
        }),
        gameStatus: 'running',
        testConfig: {
          mode: 'time',
          duration: 60,
          wordCount: 50,
          difficulty: 'Normal',
          textSource: 'english1k',
          punctuation: false
        }
      }
    },
    docs: {
      description: {
        story: 'Bug test: Mixed correct/incorrect character states should display with proper colors. Green for correct, red for incorrect, highlighted for current.'
      }
    }
  }
};
// Bug Test: Backspace artifacts and state reset issues
const BackspaceArtifacts = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [{
            char: 'T',
            status: 'correct',
            index: 0
          }, {
            char: 'h',
            status: 'correct',
            index: 1
          }, {
            char: 'e',
            status: 'correct',
            index: 2
          }, {
            char: ' ',
            status: 'correct',
            index: 3
          }, {
            char: 'q',
            status: 'incorrect',
            index: 4
          }, {
            char: 'u',
            status: 'current',
            index: 5
          }, {
            char: 'i',
            status: 'default',
            index: 6
          }, {
            char: 'c',
            status: 'default',
            index: 7
          }, {
            char: 'k',
            status: 'default',
            index: 8
          }, ...Array(34).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),
            status: 'default',
            index: i + 9
          }))],
          userInput: 'The x'
        }),
        gameStatus: 'running',
        testConfig: {
          mode: 'time',
          duration: 60
        }
      }
    },
    docs: {
      description: {
        story: 'Bug test: After backspace, character states should reset properly. Index 4 shows incorrect state (from wrong typing), index 5 should be current position after backspace.'
      }
    }
  }
};
// Bug Test: All character states in sequence for visual verification
const VisualRegressionTest = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [
          // Correct sequence
          {
            char: 'C',
            status: 'correct',
            index: 0
          }, {
            char: 'o',
            status: 'correct',
            index: 1
          }, {
            char: 'r',
            status: 'correct',
            index: 2
          }, {
            char: 'r',
            status: 'correct',
            index: 3
          }, {
            char: 'e',
            status: 'correct',
            index: 4
          }, {
            char: 'c',
            status: 'correct',
            index: 5
          }, {
            char: 't',
            status: 'correct',
            index: 6
          }, {
            char: ' ',
            status: 'correct',
            index: 7
          },
          // Incorrect sequence
          {
            char: 'I',
            status: 'incorrect',
            index: 8
          }, {
            char: 'n',
            status: 'incorrect',
            index: 9
          }, {
            char: 'c',
            status: 'incorrect',
            index: 10
          }, {
            char: 'o',
            status: 'incorrect',
            index: 11
          }, {
            char: 'r',
            status: 'incorrect',
            index: 12
          }, {
            char: 'r',
            status: 'incorrect',
            index: 13
          }, {
            char: 'e',
            status: 'incorrect',
            index: 14
          }, {
            char: 'c',
            status: 'incorrect',
            index: 15
          }, {
            char: 't',
            status: 'incorrect',
            index: 16
          }, {
            char: ' ',
            status: 'incorrect',
            index: 17
          },
          // Current position
          {
            char: 'C',
            status: 'current',
            index: 18
          },
          // Default/untyped
          {
            char: 'u',
            status: 'default',
            index: 19
          }, {
            char: 'r',
            status: 'default',
            index: 20
          }, {
            char: 'r',
            status: 'default',
            index: 21
          }, {
            char: 'e',
            status: 'default',
            index: 22
          }, {
            char: 'n',
            status: 'default',
            index: 23
          }, {
            char: 't',
            status: 'default',
            index: 24
          }]
        }),
        gameStatus: 'running',
        testConfig: {
          mode: 'words',
          wordCount: 25
        }
      }
    },
    docs: {
      description: {
        story: 'Visual regression test: All character states displayed in sequence. Use this to verify styling consistency across all states.'
      }
    }
  }
};
// Bug Test: Edge case with rapid state transitions
const EdgeCaseStates = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [
          // Mix of states that might cause rendering issues
          {
            char: 'E',
            status: 'correct',
            index: 0
          }, {
            char: 'd',
            status: 'incorrect',
            index: 1
          }, {
            char: 'g',
            status: 'correct',
            index: 2
          }, {
            char: 'e',
            status: 'incorrect',
            index: 3
          }, {
            char: ' ',
            status: 'current',
            index: 4
          }, {
            char: 'c',
            status: 'default',
            index: 5
          }, {
            char: 'a',
            status: 'correct',
            index: 6
          }, {
            char: 's',
            status: 'incorrect',
            index: 7
          }, {
            char: 'e',
            status: 'current',
            index: 8
          }, {
            char: 's',
            status: 'default',
            index: 9
          }, ...Array(33).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 10),
            status: 'default',
            index: i + 10
          }))]
        }),
        gameStatus: 'running',
        testConfig: {
          mode: 'time',
          duration: 30
        }
      }
    },
    docs: {
      description: {
        story: 'Edge case test: Unusual state combinations that might cause visual glitches. Tests rapid transitions and potentially invalid state combinations.'
      }
    }
  }
};
// Bug Test: Invisible correct characters issue
const InvisibleCorrectCharacters = {
  parameters: {
    mockStore: {
      game: {
        ...setupGameState({
          charStates: [
          // These should be clearly visible with green styling
          {
            char: 'T',
            status: 'correct',
            index: 0
          }, {
            char: 'h',
            status: 'correct',
            index: 1
          }, {
            char: 'e',
            status: 'correct',
            index: 2
          }, {
            char: 's',
            status: 'correct',
            index: 3
          }, {
            char: 'e',
            status: 'correct',
            index: 4
          }, {
            char: ' ',
            status: 'correct',
            index: 5
          }, {
            char: 's',
            status: 'correct',
            index: 6
          }, {
            char: 'h',
            status: 'correct',
            index: 7
          }, {
            char: 'o',
            status: 'correct',
            index: 8
          }, {
            char: 'u',
            status: 'correct',
            index: 9
          }, {
            char: 'l',
            status: 'correct',
            index: 10
          }, {
            char: 'd',
            status: 'correct',
            index: 11
          }, {
            char: ' ',
            status: 'correct',
            index: 12
          }, {
            char: 'b',
            status: 'correct',
            index: 13
          }, {
            char: 'e',
            status: 'correct',
            index: 14
          }, {
            char: ' ',
            status: 'correct',
            index: 15
          }, {
            char: 'g',
            status: 'correct',
            index: 16
          }, {
            char: 'r',
            status: 'correct',
            index: 17
          }, {
            char: 'e',
            status: 'correct',
            index: 18
          }, {
            char: 'e',
            status: 'correct',
            index: 19
          }, {
            char: 'n',
            status: 'current',
            index: 20
          }, ...Array(22).fill(null).map((_, i) => ({
            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 21),
            status: 'default',
            index: i + 21
          }))]
        }),
        gameStatus: 'running',
        testConfig: {
          mode: 'time',
          duration: 60
        }
      }
    },
    docs: {
      description: {
        story: 'Bug test: Many consecutive correct characters. If styling is broken, these may appear unstyled/invisible instead of green.'
      }
    }
  }
};
;
const __namedExportsOrder = ["Ready", "ActiveTypingTimeMode", "WordsMode", "WithErrors", "Completed", "DarkMode", "BlockCaret", "UnderlineCaret", "CharacterStateBugs", "BackspaceArtifacts", "VisualRegressionTest", "EdgeCaseStates", "InvisibleCorrectCharacters"];
Ready.parameters = {
  ...Ready.parameters,
  docs: {
    ...Ready.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState(),\n        gameStatus: 'ready',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          wordCount: 50,\n          difficulty: 'Normal',\n          textSource: 'english1k',\n          punctuation: false\n        }\n      }\n    }\n  }\n}",
      ...Ready.parameters?.docs?.source
    }
  }
};
ActiveTypingTimeMode.parameters = {
  ...ActiveTypingTimeMode.parameters,
  docs: {
    ...ActiveTypingTimeMode.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [{\n            char: 'T',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'h',\n            status: 'correct',\n            index: 1\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 2\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 3\n          }, {\n            char: 'q',\n            status: 'correct',\n            index: 4\n          }, {\n            char: 'u',\n            status: 'current',\n            index: 5\n          }, {\n            char: 'i',\n            status: 'default',\n            index: 6\n          }, {\n            char: 'c',\n            status: 'default',\n            index: 7\n          }, {\n            char: 'k',\n            status: 'default',\n            index: 8\n          }, ...Array(34).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),\n            status: 'default' as const,\n            index: i + 9\n          }))],\n          currentWordIndex: 1,\n          userInput: 'The q'\n        }),\n        gameStatus: 'running',\n        timeRemaining: 45000,\n        stats: {\n          wpm: 42,\n          rawWpm: 45,\n          accuracy: 96.5,\n          correctChars: 5,\n          incorrectChars: 0,\n          totalChars: 5\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Active typing session in time mode with live statistics'\n      }\n    }\n  }\n}",
      ...ActiveTypingTimeMode.parameters?.docs?.source
    }
  }
};
WordsMode.parameters = {
  ...WordsMode.parameters,
  docs: {
    ...WordsMode.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState(),\n        gameStatus: 'running',\n        wordsCompleted: 3,\n        targetWordCount: 25,\n        wordsProgress: 12,\n        testConfig: {\n          mode: 'words',\n          wordCount: 25\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Words mode with progress indicator'\n      }\n    }\n  }\n}",
      ...WordsMode.parameters?.docs?.source
    }
  }
};
WithErrors.parameters = {
  ...WithErrors.parameters,
  docs: {
    ...WithErrors.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [{\n            char: 'T',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'h',\n            status: 'correct',\n            index: 1\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 2\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 3\n          }, {\n            char: 'q',\n            status: 'incorrect',\n            index: 4\n          }, {\n            char: 'u',\n            status: 'incorrect',\n            index: 5\n          }, {\n            char: 'i',\n            status: 'current',\n            index: 6\n          }, ...Array(36).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 7),\n            status: 'default' as const,\n            index: i + 7\n          }))]\n        }),\n        gameStatus: 'running',\n        stats: {\n          wpm: 38,\n          rawWpm: 42,\n          accuracy: 85.7,\n          correctChars: 4,\n          incorrectChars: 2,\n          totalChars: 6\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Typing with some errors highlighted in red'\n      }\n    }\n  }\n}",
      ...WithErrors.parameters?.docs?.source
    }
  }
};
Completed.parameters = {
  ...Completed.parameters,
  docs: {
    ...Completed.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: Array(43).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i),\n            status: 'correct' as const,\n            index: i\n          }))\n        }),\n        gameStatus: 'finished',\n        stats: {\n          wpm: 72,\n          rawWpm: 75,\n          accuracy: 98.5,\n          correctChars: 43,\n          incorrectChars: 1,\n          totalChars: 44,\n          duration: 30000\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Completed typing test showing results'\n      }\n    }\n  }\n}",
      ...Completed.parameters?.docs?.source
    }
  }
};
DarkMode.parameters = {
  ...DarkMode.parameters,
  docs: {
    ...DarkMode.parameters?.docs,
    source: {
      originalSource: "{\n  ...Ready,\n  globals: {\n    theme: 'dark'\n  }\n}",
      ...DarkMode.parameters?.docs?.source
    }
  }
};
BlockCaret.parameters = {
  ...BlockCaret.parameters,
  docs: {
    ...BlockCaret.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: setupGameState(),\n      settings: {\n        settings: {\n          appearance: {\n            caretStyle: 'block'\n          }\n        }\n      }\n    }\n  }\n}",
      ...BlockCaret.parameters?.docs?.source
    }
  }
};
UnderlineCaret.parameters = {
  ...UnderlineCaret.parameters,
  docs: {
    ...UnderlineCaret.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: setupGameState(),\n      settings: {\n        settings: {\n          appearance: {\n            caretStyle: 'underline'\n          }\n        }\n      }\n    }\n  }\n}",
      ...UnderlineCaret.parameters?.docs?.source
    }
  }
};
CharacterStateBugs.parameters = {
  ...CharacterStateBugs.parameters,
  docs: {
    ...CharacterStateBugs.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [{\n            char: 'T',\n            status: 'correct',\n            index: 0\n          },\n          // Should be green\n          {\n            char: 'h',\n            status: 'correct',\n            index: 1\n          },\n          // Should be green\n          {\n            char: 'e',\n            status: 'incorrect',\n            index: 2\n          },\n          // Should be red\n          {\n            char: ' ',\n            status: 'incorrect',\n            index: 3\n          },\n          // Should be red\n          {\n            char: 'q',\n            status: 'correct',\n            index: 4\n          },\n          // Should be green\n          {\n            char: 'u',\n            status: 'incorrect',\n            index: 5\n          },\n          // Should be red\n          {\n            char: 'i',\n            status: 'current',\n            index: 6\n          },\n          // Should be highlighted\n          {\n            char: 'c',\n            status: 'default',\n            index: 7\n          },\n          // Should be muted\n          {\n            char: 'k',\n            status: 'default',\n            index: 8\n          },\n          // Should be muted\n          ...Array(34).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),\n            status: 'default' as const,\n            index: i + 9\n          }))]\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          wordCount: 50,\n          difficulty: 'Normal',\n          textSource: 'english1k',\n          punctuation: false\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Bug test: Mixed correct/incorrect character states should display with proper colors. Green for correct, red for incorrect, highlighted for current.'\n      }\n    }\n  }\n}",
      ...CharacterStateBugs.parameters?.docs?.source
    }
  }
};
BackspaceArtifacts.parameters = {
  ...BackspaceArtifacts.parameters,
  docs: {
    ...BackspaceArtifacts.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [{\n            char: 'T',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'h',\n            status: 'correct',\n            index: 1\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 2\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 3\n          }, {\n            char: 'q',\n            status: 'incorrect',\n            index: 4\n          },\n          // User typed wrong, then backspaced\n          {\n            char: 'u',\n            status: 'current',\n            index: 5\n          },\n          // Should be current after backspace\n          {\n            char: 'i',\n            status: 'default',\n            index: 6\n          },\n          // Should be clean default\n          {\n            char: 'c',\n            status: 'default',\n            index: 7\n          }, {\n            char: 'k',\n            status: 'default',\n            index: 8\n          }, ...Array(34).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),\n            status: 'default' as const,\n            index: i + 9\n          }))],\n          userInput: 'The x' // Shows that user typed 'x' instead of 'q', then backspaced\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Bug test: After backspace, character states should reset properly. Index 4 shows incorrect state (from wrong typing), index 5 should be current position after backspace.'\n      }\n    }\n  }\n}",
      ...BackspaceArtifacts.parameters?.docs?.source
    }
  }
};
VisualRegressionTest.parameters = {
  ...VisualRegressionTest.parameters,
  docs: {
    ...VisualRegressionTest.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n          // Correct sequence\n          {\n            char: 'C',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'o',\n            status: 'correct',\n            index: 1\n          }, {\n            char: 'r',\n            status: 'correct',\n            index: 2\n          }, {\n            char: 'r',\n            status: 'correct',\n            index: 3\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 4\n          }, {\n            char: 'c',\n            status: 'correct',\n            index: 5\n          }, {\n            char: 't',\n            status: 'correct',\n            index: 6\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 7\n          },\n          // Incorrect sequence\n          {\n            char: 'I',\n            status: 'incorrect',\n            index: 8\n          }, {\n            char: 'n',\n            status: 'incorrect',\n            index: 9\n          }, {\n            char: 'c',\n            status: 'incorrect',\n            index: 10\n          }, {\n            char: 'o',\n            status: 'incorrect',\n            index: 11\n          }, {\n            char: 'r',\n            status: 'incorrect',\n            index: 12\n          }, {\n            char: 'r',\n            status: 'incorrect',\n            index: 13\n          }, {\n            char: 'e',\n            status: 'incorrect',\n            index: 14\n          }, {\n            char: 'c',\n            status: 'incorrect',\n            index: 15\n          }, {\n            char: 't',\n            status: 'incorrect',\n            index: 16\n          }, {\n            char: ' ',\n            status: 'incorrect',\n            index: 17\n          },\n          // Current position\n          {\n            char: 'C',\n            status: 'current',\n            index: 18\n          },\n          // Default/untyped\n          {\n            char: 'u',\n            status: 'default',\n            index: 19\n          }, {\n            char: 'r',\n            status: 'default',\n            index: 20\n          }, {\n            char: 'r',\n            status: 'default',\n            index: 21\n          }, {\n            char: 'e',\n            status: 'default',\n            index: 22\n          }, {\n            char: 'n',\n            status: 'default',\n            index: 23\n          }, {\n            char: 't',\n            status: 'default',\n            index: 24\n          }]\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'words',\n          wordCount: 25\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Visual regression test: All character states displayed in sequence. Use this to verify styling consistency across all states.'\n      }\n    }\n  }\n}",
      ...VisualRegressionTest.parameters?.docs?.source
    }
  }
};
EdgeCaseStates.parameters = {
  ...EdgeCaseStates.parameters,
  docs: {
    ...EdgeCaseStates.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n          // Mix of states that might cause rendering issues\n          {\n            char: 'E',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'd',\n            status: 'incorrect',\n            index: 1\n          }, {\n            char: 'g',\n            status: 'correct',\n            index: 2\n          }, {\n            char: 'e',\n            status: 'incorrect',\n            index: 3\n          }, {\n            char: ' ',\n            status: 'current',\n            index: 4\n          },\n          // Current on space\n          {\n            char: 'c',\n            status: 'default',\n            index: 5\n          }, {\n            char: 'a',\n            status: 'correct',\n            index: 6\n          },\n          // Correct after current\n          {\n            char: 's',\n            status: 'incorrect',\n            index: 7\n          },\n          // Incorrect after correct\n          {\n            char: 'e',\n            status: 'current',\n            index: 8\n          },\n          // Another current (should not happen)\n          {\n            char: 's',\n            status: 'default',\n            index: 9\n          }, ...Array(33).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 10),\n            status: 'default' as const,\n            index: i + 10\n          }))]\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 30\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Edge case test: Unusual state combinations that might cause visual glitches. Tests rapid transitions and potentially invalid state combinations.'\n      }\n    }\n  }\n}",
      ...EdgeCaseStates.parameters?.docs?.source
    }
  }
};
InvisibleCorrectCharacters.parameters = {
  ...InvisibleCorrectCharacters.parameters,
  docs: {
    ...InvisibleCorrectCharacters.parameters?.docs,
    source: {
      originalSource: "{\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n          // These should be clearly visible with green styling\n          {\n            char: 'T',\n            status: 'correct',\n            index: 0\n          }, {\n            char: 'h',\n            status: 'correct',\n            index: 1\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 2\n          }, {\n            char: 's',\n            status: 'correct',\n            index: 3\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 4\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 5\n          }, {\n            char: 's',\n            status: 'correct',\n            index: 6\n          }, {\n            char: 'h',\n            status: 'correct',\n            index: 7\n          }, {\n            char: 'o',\n            status: 'correct',\n            index: 8\n          }, {\n            char: 'u',\n            status: 'correct',\n            index: 9\n          }, {\n            char: 'l',\n            status: 'correct',\n            index: 10\n          }, {\n            char: 'd',\n            status: 'correct',\n            index: 11\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 12\n          }, {\n            char: 'b',\n            status: 'correct',\n            index: 13\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 14\n          }, {\n            char: ' ',\n            status: 'correct',\n            index: 15\n          }, {\n            char: 'g',\n            status: 'correct',\n            index: 16\n          }, {\n            char: 'r',\n            status: 'correct',\n            index: 17\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 18\n          }, {\n            char: 'e',\n            status: 'correct',\n            index: 19\n          }, {\n            char: 'n',\n            status: 'current',\n            index: 20\n          }, ...Array(22).fill(null).map((_, i) => ({\n            char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 21),\n            status: 'default' as const,\n            index: i + 21\n          }))]\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60\n        }\n      }\n    },\n    docs: {\n      description: {\n        story: 'Bug test: Many consecutive correct characters. If styling is broken, these may appear unstyled/invisible instead of green.'\n      }\n    }\n  }\n}",
      ...InvisibleCorrectCharacters.parameters?.docs?.source
    }
  }
};

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (true) {
			errorOverlay = false;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

}]);
//# sourceMappingURL=stories-components-game-TypingArea-stories.iframe.bundle.js.map