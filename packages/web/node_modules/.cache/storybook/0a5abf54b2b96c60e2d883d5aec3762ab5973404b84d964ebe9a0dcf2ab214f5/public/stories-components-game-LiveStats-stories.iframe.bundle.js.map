{"version":3,"file":"stories-components-game-LiveStats-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AAEA;AACA;AAEA;AACA;;AAEA;AAAA;;AACA;AACA;AASA;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAMA;AAAA;;AACA;AACA;;AASA;AAAA;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAMA;AACA;;AACA;AAAA;;AACA;AAAA;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;AAMA;AACA;;AACA;AAAA;;AACA;AAAA;;;;;;;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAOA;;;AAvEA;AACA;;;;AAFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://type/./src/components/game/LiveStats.tsx","webpack://type/./src/lib/utils.ts","webpack://type/./src/stories/components/game/LiveStats.stories.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { useGameStore } from '@/store/useGameStore';\nimport { cn } from '@/lib/utils';\n\nexport function LiveStats() {\n  const gameStatus = useGameStore((state) => state.gameStatus);\n  const stats = useGameStore((state) => state.stats);\n  const testConfig = useGameStore((state) => state.testConfig);\n\n  // Only show live stats when game is running\n  if (gameStatus !== 'running' && gameStatus !== 'finished') return null;\n\n  return (\n    <div className=\"flex justify-center gap-4 sm:gap-6\">\n      {/* WPM */}\n      <div className=\"text-center\">\n        <div\n          className={cn(\n            'font-mono text-xl font-bold sm:text-2xl',\n            stats.wpm >= 60\n              ? 'text-success'\n              : stats.wpm >= 40\n                ? 'text-primary'\n                : 'text-foreground'\n          )}\n        >\n          {stats.wpm}\n        </div>\n        <div className=\"text-muted-foreground text-xs tracking-wide uppercase\">\n          WPM\n        </div>\n      </div>\n\n      {/* Accuracy */}\n      <div className=\"text-center\">\n        <div\n          className={cn(\n            'font-mono text-xl font-bold sm:text-2xl',\n            stats.accuracy >= 95\n              ? 'text-success'\n              : stats.accuracy >= 90\n                ? 'text-warning'\n                : 'text-error'\n          )}\n        >\n          {stats.accuracy}%\n        </div>\n        <div className=\"text-muted-foreground text-xs tracking-wide uppercase\">\n          Accuracy\n        </div>\n      </div>\n\n      {/* Elapsed time for words mode (don't show word count as WordsProgress handles that) */}\n      {testConfig.mode === 'words' && (\n        <div className=\"text-center\">\n          <div className=\"text-foreground font-mono text-xl font-bold sm:text-2xl\">\n            {Math.floor(stats.elapsedTime / 1000)}s\n          </div>\n          <div className=\"text-muted-foreground text-xs tracking-wide uppercase\">\n            Elapsed\n          </div>\n        </div>\n      )}\n\n      {testConfig.mode === 'time' && (\n        <div className=\"text-center\">\n          <div className=\"text-foreground font-mono text-xl font-bold sm:text-2xl\">\n            {Math.floor(stats.elapsedTime / 1000)}s\n          </div>\n          <div className=\"text-muted-foreground text-xs tracking-wide uppercase\">\n            Elapsed\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","import type { Meta, StoryObj } from '@storybook/nextjs';\nimport { LiveStats } from '@/components/game/LiveStats';\n\nconst meta = {\n  title: 'Components/Game/LiveStats',\n  component: LiveStats,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component:\n          'Displays live statistics during typing sessions including WPM, accuracy, and elapsed time.',\n      },\n    },\n  },\n  tags: ['game', 'stats', 'autodocs'],\n} satisfies Meta<typeof LiveStats>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Hidden when not running\nexport const NotRunning: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'ready',\n        stats: {\n          wpm: 0,\n          accuracy: 100,\n          elapsedTime: 0,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Component is hidden when game is not running',\n      },\n    },\n  },\n};\n\n// Running with low stats\nexport const RunningLowStats: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 35,\n          rawWpm: 38,\n          accuracy: 85.5,\n          correctChars: 42,\n          incorrectChars: 8,\n          totalChars: 50,\n          elapsedTime: 15000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Running game with below-average performance',\n      },\n    },\n  },\n};\n\n// Running with medium stats\nexport const RunningMediumStats: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 52,\n          rawWpm: 55,\n          accuracy: 92.3,\n          correctChars: 120,\n          incorrectChars: 10,\n          totalChars: 130,\n          elapsedTime: 30000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Running game with average performance',\n      },\n    },\n  },\n};\n\n// Running with high stats\nexport const RunningHighStats: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 85,\n          rawWpm: 88,\n          accuracy: 98.5,\n          correctChars: 250,\n          incorrectChars: 4,\n          totalChars: 254,\n          elapsedTime: 45000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Running game with excellent performance',\n      },\n    },\n  },\n};\n\n// Exceptional performance\nexport const ExceptionalPerformance: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 120,\n          rawWpm: 125,\n          accuracy: 99.8,\n          correctChars: 500,\n          incorrectChars: 1,\n          totalChars: 501,\n          elapsedTime: 60000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 120,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Professional-level typing performance',\n      },\n    },\n  },\n};\n\n// Words mode\nexport const WordsMode: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 65,\n          rawWpm: 68,\n          accuracy: 95.5,\n          correctChars: 150,\n          incorrectChars: 7,\n          totalChars: 157,\n          elapsedTime: 25000,\n        },\n        testConfig: {\n          mode: 'words',\n          wordCount: 50,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Words mode shows elapsed time instead of remaining time',\n      },\n    },\n  },\n};\n\n// Just started\nexport const JustStarted: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 0,\n          rawWpm: 0,\n          accuracy: 100,\n          correctChars: 3,\n          incorrectChars: 0,\n          totalChars: 3,\n          elapsedTime: 1000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Game just started with minimal stats',\n      },\n    },\n  },\n};\n\n// Finished state\nexport const Finished: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'finished',\n        stats: {\n          wpm: 72,\n          rawWpm: 75,\n          accuracy: 96.8,\n          correctChars: 360,\n          incorrectChars: 12,\n          totalChars: 372,\n          elapsedTime: 60000,\n          duration: 60000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Shows final stats when test is completed',\n      },\n    },\n  },\n};\n\n// Perfect accuracy\nexport const PerfectAccuracy: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 60,\n          rawWpm: 60,\n          accuracy: 100,\n          correctChars: 100,\n          incorrectChars: 0,\n          totalChars: 100,\n          elapsedTime: 20000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Perfect 100% accuracy with green highlighting',\n      },\n    },\n  },\n};\n\n// Poor accuracy\nexport const PoorAccuracy: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 45,\n          rawWpm: 60,\n          accuracy: 75.0,\n          correctChars: 75,\n          incorrectChars: 25,\n          totalChars: 100,\n          elapsedTime: 20000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Poor accuracy highlighted in red',\n      },\n    },\n  },\n};\n\n// Dark mode\nexport const DarkMode: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 65,\n          rawWpm: 68,\n          accuracy: 94.5,\n          correctChars: 150,\n          incorrectChars: 8,\n          totalChars: 158,\n          elapsedTime: 30000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n  },\n  globals: {\n    colorScheme: 'dark',\n  },\n};\n\n// Different themes\nexport const NordTheme: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 70,\n          rawWpm: 73,\n          accuracy: 96.0,\n          correctChars: 200,\n          incorrectChars: 8,\n          totalChars: 208,\n          elapsedTime: 35000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n  },\n  globals: {\n    theme: 'nord',\n  },\n};\n\n// Mobile view\nexport const MobileView: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        gameStatus: 'running',\n        stats: {\n          wpm: 55,\n          rawWpm: 58,\n          accuracy: 93.5,\n          correctChars: 120,\n          incorrectChars: 8,\n          totalChars: 128,\n          elapsedTime: 25000,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    viewport: {\n      defaultViewport: 'mobile',\n    },\n    docs: {\n      description: {\n        story: 'Responsive design for mobile devices',\n      },\n    },\n  },\n};\n"],"names":[],"sourceRoot":""}