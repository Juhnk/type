{"version":3,"file":"stories-components-game-TypingArea-stories.0467506412cf8eb9b7c0.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;AACA;;;AAIA;AACA;AACA;AAEA;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AACA;;AAEA;AAAA;;AACA;AAAA;;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;AACA;AACA;;;;;AACA;AACA;AAEA;AACA;;AACA;AAEA;AACA;AAAA;;AACA;AAAA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AAMA;AAPA;;;;;AAUA;;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAIA;AACA;AAEA;AARA;;;;;;;;;;;;;;;AAeA;AAAA;AACA;AAAA;AAAA;;;;;;AAKA;AACA;AAAA;;;;;;AAKA;AACA;AAAA;;;;;;;;;;;;AAMA;;;AA/GA;;;;;AAiHA;AACA;;AACA;AACA;AAAA;;AACA;AAAA;;AAEA;AACA;AAMA;AACA;;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAKA;AAIA;AAVA;;;;;AAaA;;;;;;AAGA;AACA;AAAA;;;;;;AAKA;AACA;AAAA;;;;;;;;;;;;AAMA;AA7DA;;;;;;AA+DA;AAEA;AAGA;;AAKA;AACA;AACA;;;;;;;;;;AAKA;;;;;AAGA;AAAA;AACA;AACA;AAGA;AAEA;AAEA;AACA;;AAGA;AAAA;AAAA;;AACA;AAIA;AAAA;AAEA;AAAA;;;;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;AAGA;AAEA;AACA;;;;;AAEA;AAEA;AACA;AACA;;;;;AAGA;;;;;;;;;;;;;;;;AAMA;AACA;AACA;;;;;;;;;;AAKA;;;;;;;;;;;AAGA;;;AAnVA;AACA;;AAIA;AAGA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AACA;;;AApBA","sources":["webpack://type/./src/components/game/TypingArea.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect } from 'react';\nimport { useGameStore } from '@/store/useGameStore';\nimport { ResultsCard } from './ResultsCard';\nimport { LoadingState } from './LoadingState';\nimport { ErrorState } from './ErrorState';\nimport { TimerDisplay } from './TimerDisplay';\nimport { LiveStats } from './LiveStats';\nimport { WordsProgress } from './WordsProgress';\nimport { useTimerCleanup, useTimerVisibility } from '@/hooks/useTimerCleanup';\nimport {\n  useDeviceDetection,\n  useVirtualKeyboard,\n} from '@/hooks/useDeviceDetection';\nimport { cn } from '@/lib/utils';\n\n// Helper function to calculate current word boundaries\nconst getCurrentWordBounds = (\n  currentWordIndex: number,\n  wordBoundaries: number[],\n  textLength: number\n) => {\n  const start = wordBoundaries[currentWordIndex] || 0;\n  const end = wordBoundaries[currentWordIndex + 1] || textLength;\n  return { start, end };\n};\n\nexport function TypingArea() {\n  // Use timer cleanup hooks\n  useTimerCleanup();\n  useTimerVisibility();\n\n  // Mobile detection and optimization\n  const { isMobile, isTouchDevice } = useDeviceDetection();\n  const hasVirtualKeyboard = useVirtualKeyboard();\n\n  // Use atomic selectors to prevent infinite loop and optimize performance\n  const charStates = useGameStore((state) => state.charStates);\n  const gameStatus = useGameStore((state) => state.gameStatus);\n  const testConfig = useGameStore((state) => state.testConfig);\n  const textWindow = useGameStore((state) => state.textWindow);\n  const handleKeyPress = useGameStore((state) => state.handleKeyPress);\n  const isPreparingGame = useGameStore((state) => state.isPreparingGame);\n  const gamePreparationError = useGameStore(\n    (state) => state.gamePreparationError\n  );\n  const prepareGame = useGameStore((state) => state.prepareGame);\n  const useFallbackWords = useGameStore((state) => state.useFallbackWords);\n\n  // Prepare game on component mount\n  useEffect(() => {\n    prepareGame();\n  }, [prepareGame]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Prevent default browser actions for specific keys\n      if (\n        event.key === 'Tab' ||\n        event.key === 'Escape' ||\n        (event.key === ' ' && event.target === document.body)\n      ) {\n        event.preventDefault();\n      }\n\n      // Only handle typing when game is ready or running\n      if (gameStatus === 'ready' || gameStatus === 'running') {\n        handleKeyPress(event.key);\n      }\n    };\n\n    // Add global keydown listener\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup function to remove listener\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [gameStatus, handleKeyPress]);\n\n  const getCharClassName = (status: string) => {\n    switch (status) {\n      case 'correct':\n        return 'text-success bg-success-soft';\n      case 'incorrect':\n        return 'text-error bg-error-soft';\n      case 'current':\n        return 'bg-primary text-primary-foreground animate-pulse border-l-2 border-primary';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  // Component to render the appropriate typing display based on mode\n  const TypingDisplay = () => {\n    if (testConfig.mode === 'time') {\n      return <TimeModePastedComponent />;\n    } else {\n      return <StandardTypingDisplay />;\n    }\n  };\n\n  // Optimized auto-scrolling display for time mode\n  const TimeModePastedComponent = () => {\n    const { lines, lineCharOffsets, scrollOffset } = textWindow;\n    \n    // Get word tracking state\n    const currentWordIndex = useGameStore((state) => state.currentWordIndex);\n    const wordBoundaries = useGameStore((state) => state.wordBoundaries);\n\n    // Simple, performant scrolling - no complex interpolation needed\n    // The store handles the timing, we just smoothly animate the transition\n\n    // Buffer rendering to prevent content popping\n    const renderBuffer = 2;\n    const startIndex = Math.max(0, scrollOffset - renderBuffer);\n    const endIndex = Math.min(lines.length, scrollOffset + 3 + renderBuffer);\n    const linesToRender = lines.slice(startIndex, endIndex);\n    \n    // Calculate current word boundaries\n    const { start: wordStart, end: wordEnd } = getCurrentWordBounds(\n      currentWordIndex,\n      wordBoundaries,\n      charStates.length\n    );\n\n    // Memoize the line rendering for performance\n    const renderLineWithCharacterStates = React.useMemo(() => {\n      return (line: string, lineIndex: number) => {\n        const globalLineIndex = startIndex + lineIndex;\n        const lineStartChar = lineCharOffsets[globalLineIndex] || 0;\n\n        return line.split('').map((char, charIndex) => {\n          const globalCharIndex = lineStartChar + charIndex;\n          const charState = charStates[globalCharIndex];\n\n          if (!charState) return null;\n\n          const isInCurrentWord = globalCharIndex >= wordStart && globalCharIndex < wordEnd && char !== ' ';\n\n          return (\n            <span\n              key={`${globalLineIndex}-${charIndex}`}\n              className={cn(\n                'transition-colors duration-150',\n                getCharClassName(charState.status),\n                isInCurrentWord && 'bg-primary/10 dark:bg-primary/15'\n              )}\n            >\n              {char === ' ' ? '\\u00A0' : char}\n            </span>\n          );\n        });\n      };\n    }, [lineCharOffsets, startIndex, charStates, wordStart, wordEnd]);\n\n    return (\n      <div className=\"typing-container relative\">\n        {/* Fixed 3-line container with smooth transform-based scrolling */}\n        <div\n          className={cn(\n            'overflow-hidden',\n            // Responsive height\n            isMobile ? 'h-20' : 'h-24'\n          )}\n          role=\"textbox\"\n          aria-multiline=\"true\"\n          aria-describedby=\"typing-instructions game-status-live\"\n          tabIndex={0}\n        >\n          <div\n            className={cn(\n              'font-mono leading-8',\n              // Responsive text size\n              isMobile ? 'text-base' : 'text-lg sm:text-xl'\n            )}\n            style={{\n              transform: `translateY(-${(scrollOffset - startIndex) * (isMobile ? 28 : 32)}px)`,\n              transition: 'transform 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n              willChange: 'transform',\n            }}\n          >\n            {linesToRender.map((line, index) => (\n              <div\n                key={`line-${startIndex + index}`}\n                className={cn(\n                  'leading-8',\n                  isMobile ? 'min-h-[28px]' : 'min-h-[32px]'\n                )}\n                role=\"textbox\"\n                aria-label={`Line ${startIndex + index + 1}`}\n              >\n                {renderLineWithCharacterStates(line, index)}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Content streaming indicator */}\n        {useGameStore((state) => state.isContentStreaming) && (\n          <div className=\"absolute top-0 right-0 animate-pulse text-xs text-info\">\n            Loading more content...\n          </div>\n        )}\n\n        {gameStatus === 'ready' && (\n          <p className=\"text-muted-foreground mt-6 text-center text-sm\">\n            Start typing to begin the test...\n          </p>\n        )}\n\n        {gameStatus === 'paused' && (\n          <p className=\"mt-6 text-center text-sm font-medium text-warning\">\n            Test paused - continue typing to resume\n          </p>\n        )}\n      </div>\n    );\n  };\n\n  // Standard display for words and quote modes\n  const StandardTypingDisplay = () => {\n    // Get word tracking state\n    const currentWordIndex = useGameStore((state) => state.currentWordIndex);\n    const wordBoundaries = useGameStore((state) => state.wordBoundaries);\n    \n    // Calculate current word boundaries\n    const { start, end } = getCurrentWordBounds(\n      currentWordIndex,\n      wordBoundaries,\n      charStates.length\n    );\n\n    return (\n      <div className=\"typing-container relative\">\n        <div\n          className={cn(\n            'w-full font-mono leading-relaxed tracking-wide break-words focus:outline-none',\n            // Responsive text size and spacing\n            isMobile\n              ? 'min-h-[150px] text-base'\n              : 'min-h-[200px] text-lg sm:text-xl lg:text-2xl'\n          )}\n          role=\"textbox\"\n          aria-multiline=\"true\"\n          aria-describedby=\"typing-instructions game-status-live\"\n          tabIndex={0}\n        >\n          {charStates.map((charState, index) => {\n            const isInCurrentWord = index >= start && index < end && charState.char !== ' ';\n            \n            return (\n              <span\n                key={index}\n                className={cn(\n                  'transition-colors duration-150',\n                  getCharClassName(charState.status),\n                  isInCurrentWord && 'bg-primary/10 dark:bg-primary/15'\n                )}\n                aria-label={\n                  charState.status === 'current' ? 'Current character' : undefined\n                }\n              >\n                {charState.char === ' ' ? '\\u00A0' : charState.char}\n              </span>\n            );\n          })}\n        </div>\n\n        {gameStatus === 'ready' && (\n          <p className=\"text-muted-foreground mt-6 text-center text-sm\">\n            Start typing to begin the test...\n          </p>\n        )}\n\n        {gameStatus === 'paused' && (\n          <p className=\"mt-6 text-center text-sm font-medium text-warning\">\n            Test paused - continue typing to resume\n          </p>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className={cn(\n        'mx-auto w-full max-w-5xl space-y-6',\n        // Mobile optimizations\n        isMobile && 'space-y-4 px-4',\n        hasVirtualKeyboard && 'pb-4'\n      )}\n    >\n      {/* Timer Display (time mode only) */}\n      {testConfig.mode === 'time' && (\n        <div className=\"flex justify-center\">\n          <TimerDisplay />\n        </div>\n      )}\n\n      {/* Words Progress (words mode only) */}\n      <WordsProgress />\n\n      {/* Main Typing Container */}\n      <div className=\"w-full\">\n        <div\n          className={cn(\n            'bg-card focus-within:ring-ring rounded-lg border focus-within:ring-2',\n            // Responsive padding\n            isMobile ? 'p-4' : 'p-6 sm:p-8',\n            // Touch optimizations\n            isTouchDevice && 'touch-manipulation'\n          )}\n          role=\"main\"\n          aria-label=\"Typing practice area\"\n        >\n          {/* Screen reader instructions */}\n          <div id=\"typing-instructions\" className=\"sr-only\">\n            {testConfig.mode === 'time'\n              ? `Type the text shown to practice your typing speed. Timer: ${testConfig.duration} seconds.`\n              : testConfig.mode === 'words'\n                ? `Type ${testConfig.wordCount} words as quickly and accurately as possible.`\n                : 'Type the quote shown as quickly and accurately as possible.'}{' '}\n            Use backspace to correct mistakes. Press Escape to open the command\n            palette. Current difficulty: {testConfig.difficulty}.\n          </div>\n\n          {/* Live region for game status updates */}\n          <div\n            id=\"game-status-live\"\n            className=\"sr-only\"\n            aria-live=\"polite\"\n            aria-atomic=\"false\"\n          >\n            {gameStatus === 'ready' && 'Ready to start typing'}\n            {gameStatus === 'running' && 'Test in progress'}\n            {gameStatus === 'paused' && 'Test paused'}\n            {gameStatus === 'finished' && 'Test completed'}\n          </div>\n\n          {isPreparingGame ? (\n            <LoadingState\n              message=\"Preparing your typing challenge...\"\n              variant=\"preparing\"\n            />\n          ) : gamePreparationError ? (\n            <ErrorState\n              error={`Game preparation failed: ${gamePreparationError}`}\n              onRetry={prepareGame}\n              onFallback={useFallbackWords}\n            />\n          ) : (\n            <TypingDisplay />\n          )}\n        </div>\n      </div>\n\n      {/* Statistics Below Text Box */}\n      {gameStatus === 'running' && (\n        <div className=\"flex justify-center\">\n          <LiveStats />\n        </div>\n      )}\n\n      {/* Show results card when test is finished */}\n      {gameStatus === 'finished' && <ResultsCard />}\n    </div>\n  );\n}\n"],"names":[],"sourceRoot":""}