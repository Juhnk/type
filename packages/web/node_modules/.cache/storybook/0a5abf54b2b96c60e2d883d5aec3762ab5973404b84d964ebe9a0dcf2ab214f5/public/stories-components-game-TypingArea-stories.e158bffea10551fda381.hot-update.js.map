{"version":3,"file":"stories-components-game-TypingArea-stories.e158bffea10551fda381.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;;;;;;AAIA;AAAA;;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAEA;AAAA;;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AAKA;;;;AAxEA;AACA;AACA;;;AAJA;AA4EA;AACA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AAEA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AAEA;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;AAEA;AAAA;;;;;;;AAGA;;;AAjCA;AACA;AACA;;;AAHA","sources":["webpack://type/./src/components/game/TimerDisplay.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { useGameStore } from '@/store/useGameStore';\nimport { cn } from '@/lib/utils';\n\nexport function TimerDisplay() {\n  const testConfig = useGameStore((state) => state.testConfig);\n  const timeRemaining = useGameStore((state) => state.timeRemaining);\n  const isTimerRunning = useGameStore((state) => state.isTimerRunning);\n  const gameStatus = useGameStore((state) => state.gameStatus);\n\n  // Only show timer for time mode\n  if (testConfig.mode !== 'time') return null;\n\n  const totalSeconds = Math.ceil(timeRemaining / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n\n  // Determine urgency levels\n  const isVeryLowTime = totalSeconds <= 5;\n  const isLowTime = totalSeconds <= 10;\n  const isWarningTime = totalSeconds <= 30;\n\n  // Format display based on duration\n  const formatTime = () => {\n    if (testConfig.duration >= 60) {\n      // Show mm:ss for longer tests\n      return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    } else {\n      // Show just seconds for shorter tests\n      return `${totalSeconds}s`;\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center\">\n      <div\n        className={cn(\n          'font-mono text-3xl font-bold transition-all duration-200',\n          {\n            // Normal state\n            'text-muted-foreground':\n              gameStatus === 'ready' || gameStatus === 'paused',\n            'text-foreground': gameStatus === 'running' && !isWarningTime,\n\n            // Warning states\n            'text-warning': isWarningTime && !isLowTime,\n            'animate-pulse text-error':\n              isLowTime && !isVeryLowTime,\n            'animate-bounce text-error': isVeryLowTime,\n\n            // Size based on urgency\n            'text-4xl': isLowTime,\n            'text-5xl': isVeryLowTime,\n          }\n        )}\n      >\n        {formatTime()}\n      </div>\n\n      {/* Status indicator */}\n      <div className=\"ml-3 flex flex-col items-center\">\n        <div\n          className={cn('h-2 w-2 rounded-full transition-colors duration-200', {\n            'bg-muted': gameStatus === 'ready' || gameStatus === 'paused',\n            'animate-pulse bg-success':\n              gameStatus === 'running' && isTimerRunning,\n            'bg-error': gameStatus === 'finished',\n          })}\n        />\n        <span className=\"text-muted-foreground mt-1 text-xs\">\n          {gameStatus === 'ready' && 'Ready'}\n          {gameStatus === 'running' && 'Running'}\n          {gameStatus === 'paused' && 'Paused'}\n          {gameStatus === 'finished' && 'Finished'}\n        </span>\n      </div>\n    </div>\n  );\n}\n\n// Alternative compact timer for when space is limited\nexport function CompactTimerDisplay() {\n  const testConfig = useGameStore((state) => state.testConfig);\n  const timeRemaining = useGameStore((state) => state.timeRemaining);\n  const gameStatus = useGameStore((state) => state.gameStatus);\n\n  if (testConfig.mode !== 'time') return null;\n\n  const totalSeconds = Math.ceil(timeRemaining / 1000);\n  const isLowTime = totalSeconds <= 10;\n\n  return (\n    <div\n      className={cn(\n        'inline-flex items-center gap-2 rounded-full border px-3 py-1 font-mono text-sm',\n        {\n          'border-muted-foreground/20 text-muted-foreground':\n            gameStatus !== 'running',\n          'border-success/20 text-success':\n            gameStatus === 'running' && !isLowTime,\n          'animate-pulse border-error/20 text-error':\n            gameStatus === 'running' && isLowTime,\n        }\n      )}\n    >\n      <div\n        className={cn('h-1.5 w-1.5 rounded-full', {\n          'bg-muted-foreground/40': gameStatus !== 'running',\n          'bg-success': gameStatus === 'running' && !isLowTime,\n          'bg-error': gameStatus === 'running' && isLowTime,\n        })}\n      />\n      {totalSeconds}s\n    </div>\n  );\n}\n"],"names":[],"sourceRoot":""}