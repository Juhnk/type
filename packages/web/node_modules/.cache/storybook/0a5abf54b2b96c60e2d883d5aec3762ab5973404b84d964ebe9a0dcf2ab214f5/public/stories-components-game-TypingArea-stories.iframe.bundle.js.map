{"version":3,"file":"stories-components-game-TypingArea-stories.iframe.bundle.js","mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;;AAEA;AAAA;AACA;AACA;AACA;;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvGA;AACA;AAEA;;;AAGA;AAEA;AAAA;;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AACA;AAEA;;;AAGA;AAEA;AAAA;;AACA;AAAA;;AACA;AAAA;;AACA;AAAA;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://type/../../node_modules/lucide-react/dist/esm/icons/book-open.js","webpack://type/../../node_modules/lucide-react/dist/esm/icons/clock.js","webpack://type/../../node_modules/lucide-react/dist/esm/icons/loader-circle.js","webpack://type/../../node_modules/lucide-react/dist/esm/icons/zap.js","webpack://type/./src/components/game/ErrorState.tsx","webpack://type/./src/components/game/LiveStats.tsx","webpack://type/./src/components/game/LoadingState.tsx","webpack://type/./src/components/game/TimerDisplay.tsx","webpack://type/./src/components/game/TypingArea.tsx","webpack://type/./src/components/game/WordsProgress.tsx","webpack://type/./src/hooks/useDeviceDetection.ts","webpack://type/./src/hooks/useTimerCleanup.ts","webpack://type/./src/stories/components/game/TypingArea.stories.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M12 7v14\", key: \"1akyts\" }],\n  [\n    \"path\",\n    {\n      d: \"M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z\",\n      key: \"ruj8y\"\n    }\n  ]\n];\nconst BookOpen = createLucideIcon(\"book-open\", __iconNode);\n\nexport { __iconNode, BookOpen as default };\n//# sourceMappingURL=book-open.js.map\n","/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"M12 6v6l4 2\", key: \"mmk7yg\" }],\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }]\n];\nconst Clock = createLucideIcon(\"clock\", __iconNode);\n\nexport { __iconNode, Clock as default };\n//# sourceMappingURL=clock.js.map\n","/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [[\"path\", { d: \"M21 12a9 9 0 1 1-6.219-8.56\", key: \"13zald\" }]];\nconst LoaderCircle = createLucideIcon(\"loader-circle\", __iconNode);\n\nexport { __iconNode, LoaderCircle as default };\n//# sourceMappingURL=loader-circle.js.map\n","/**\n * @license lucide-react v0.525.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\n    \"path\",\n    {\n      d: \"M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z\",\n      key: \"1xq2db\"\n    }\n  ]\n];\nconst Zap = createLucideIcon(\"zap\", __iconNode);\n\nexport { __iconNode, Zap as default };\n//# sourceMappingURL=zap.js.map\n","'use client';\n\nimport React from 'react';\n\ninterface ErrorStateProps {\n  error: string;\n  onRetry?: () => void;\n  onFallback?: () => void;\n  className?: string;\n}\n\nexport function ErrorState({\n  error,\n  onRetry,\n  onFallback,\n  className = '',\n}: ErrorStateProps) {\n  return (\n    <div className={`py-12 text-center ${className}`}>\n      <p className=\"text-destructive mb-4 text-sm\">{error}</p>\n      <div className=\"flex flex-col items-center gap-2\">\n        {onRetry && (\n          <button\n            onClick={onRetry}\n            className=\"text-primary hover:text-primary/80 text-sm underline\"\n          >\n            Try again\n          </button>\n        )}\n        {onFallback && (\n          <button\n            onClick={onFallback}\n            className=\"text-muted-foreground hover:text-muted-foreground/80 text-sm underline\"\n          >\n            Use fallback words\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","'use client';\n\nimport React from 'react';\nimport { useGameStore } from '@/store/useGameStore';\nimport { cn } from '@/lib/utils';\n\nexport function LiveStats() {\n  const gameStatus = useGameStore((state) => state.gameStatus);\n  const stats = useGameStore((state) => state.stats);\n  const testConfig = useGameStore((state) => state.testConfig);\n\n  // Only show live stats when game is running\n  if (gameStatus !== 'running' && gameStatus !== 'finished') return null;\n\n  return (\n    <div className=\"flex justify-center gap-4 sm:gap-6\">\n      {/* WPM */}\n      <div className=\"text-center\">\n        <div\n          className={cn(\n            'font-mono text-xl font-bold sm:text-2xl',\n            stats.wpm >= 60\n              ? 'text-success'\n              : stats.wpm >= 40\n                ? 'text-primary'\n                : 'text-foreground'\n          )}\n        >\n          {stats.wpm}\n        </div>\n        <div className=\"text-muted-foreground text-xs tracking-wide uppercase\">\n          WPM\n        </div>\n      </div>\n\n      {/* Accuracy */}\n      <div className=\"text-center\">\n        <div\n          className={cn(\n            'font-mono text-xl font-bold sm:text-2xl',\n            stats.accuracy >= 95\n              ? 'text-success'\n              : stats.accuracy >= 90\n                ? 'text-warning'\n                : 'text-error'\n          )}\n        >\n          {stats.accuracy}%\n        </div>\n        <div className=\"text-muted-foreground text-xs tracking-wide uppercase\">\n          Accuracy\n        </div>\n      </div>\n\n      {/* Elapsed time for words mode (don't show word count as WordsProgress handles that) */}\n      {testConfig.mode === 'words' && (\n        <div className=\"text-center\">\n          <div className=\"text-foreground font-mono text-xl font-bold sm:text-2xl\">\n            {Math.floor(stats.elapsedTime / 1000)}s\n          </div>\n          <div className=\"text-muted-foreground text-xs tracking-wide uppercase\">\n            Elapsed\n          </div>\n        </div>\n      )}\n\n      {testConfig.mode === 'time' && (\n        <div className=\"text-center\">\n          <div className=\"text-foreground font-mono text-xl font-bold sm:text-2xl\">\n            {Math.floor(stats.elapsedTime / 1000)}s\n          </div>\n          <div className=\"text-muted-foreground text-xs tracking-wide uppercase\">\n            Elapsed\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","'use client';\n\nimport React from 'react';\nimport { Loader2, Clock, BookOpen, Zap } from 'lucide-react';\nimport { useDeviceDetection } from '@/hooks/useDeviceDetection';\nimport { cn } from '@/lib/utils';\n\ninterface LoadingStateProps {\n  message?: string;\n  className?: string;\n  variant?: 'default' | 'preparing' | 'typing' | 'processing';\n  showProgress?: boolean;\n  progress?: number; // 0-100\n}\n\nexport function LoadingState({\n  message = 'Loading...',\n  className = '',\n  variant = 'default',\n  showProgress = false,\n  progress = 0,\n}: LoadingStateProps) {\n  const { isMobile } = useDeviceDetection();\n\n  const getIcon = () => {\n    switch (variant) {\n      case 'preparing':\n        return (\n          <BookOpen\n            className={cn(\n              'text-info animate-pulse',\n              isMobile ? 'h-6 w-6' : 'h-8 w-8'\n            )}\n          />\n        );\n      case 'typing':\n        return (\n          <Zap\n            className={cn(\n              'text-success animate-pulse',\n              isMobile ? 'h-6 w-6' : 'h-8 w-8'\n            )}\n          />\n        );\n      case 'processing':\n        return (\n          <Clock\n            className={cn(\n              'text-warning animate-spin',\n              isMobile ? 'h-6 w-6' : 'h-8 w-8'\n            )}\n          />\n        );\n      default:\n        return (\n          <Loader2\n            className={cn(\n              'text-primary animate-spin',\n              isMobile ? 'h-6 w-6' : 'h-8 w-8'\n            )}\n          />\n        );\n    }\n  };\n\n  const getLoadingMessages = () => {\n    const messages = {\n      preparing: [\n        'Preparing your typing challenge...',\n        'Selecting words for your level...',\n        'Setting up your practice session...',\n      ],\n      typing: [\n        'Processing your input...',\n        'Calculating your performance...',\n        'Analyzing your typing patterns...',\n      ],\n      processing: [\n        'Saving your results...',\n        'Updating your statistics...',\n        'Finalizing your session...',\n      ],\n      default: ['Loading...', 'Please wait...', 'Getting things ready...'],\n    };\n    return messages[variant] || messages.default;\n  };\n\n  // Cycle through different loading messages for better UX\n  const [messageIndex, setMessageIndex] = React.useState(0);\n  const loadingMessages = getLoadingMessages();\n\n  React.useEffect(() => {\n    if (loadingMessages.length > 1) {\n      const interval = setInterval(() => {\n        setMessageIndex((prev) => (prev + 1) % loadingMessages.length);\n      }, 2000);\n      return () => clearInterval(interval);\n    }\n  }, [loadingMessages.length]);\n\n  const currentMessage =\n    message === 'Loading...' ? loadingMessages[messageIndex] : message;\n\n  return (\n    <div\n      className={cn(\n        'flex flex-col items-center justify-center space-y-4',\n        isMobile ? 'py-8' : 'py-12',\n        className\n      )}\n    >\n      {/* Loading Icon */}\n      <div className=\"flex items-center justify-center\">{getIcon()}</div>\n\n      {/* Progress Bar (if enabled) */}\n      {showProgress && (\n        <div className=\"w-full max-w-xs\">\n          <div className=\"bg-muted h-2 w-full rounded-full\">\n            <div\n              className=\"bg-primary h-2 rounded-full transition-all duration-300 ease-out\"\n              style={{ width: `${Math.min(100, Math.max(0, progress))}%` }}\n            />\n          </div>\n          <p className=\"text-muted-foreground mt-2 text-center text-xs\">\n            {Math.round(progress)}% complete\n          </p>\n        </div>\n      )}\n\n      {/* Loading Message */}\n      <div className=\"space-y-1 text-center\">\n        <p\n          className={cn(\n            'text-muted-foreground font-medium',\n            isMobile ? 'text-sm' : 'text-base'\n          )}\n        >\n          {currentMessage}\n        </p>\n\n        {/* Additional context for longer loads */}\n        {variant === 'preparing' && (\n          <p className=\"text-muted-foreground/75 text-xs\">\n            This may take a few seconds for optimal word selection\n          </p>\n        )}\n      </div>\n\n      {/* Pulse Animation for Visual Interest */}\n      <div className=\"flex gap-1\">\n        {[0, 1, 2].map((i) => (\n          <div\n            key={i}\n            className={cn(\n              'bg-primary/30 rounded-full',\n              isMobile ? 'h-2 w-2' : 'h-3 w-3'\n            )}\n            style={{\n              animation: `pulse 1.5s ease-in-out ${i * 0.2}s infinite`,\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","'use client';\n\nimport React from 'react';\nimport { useGameStore } from '@/store/useGameStore';\nimport { cn } from '@/lib/utils';\n\nexport function TimerDisplay() {\n  const testConfig = useGameStore((state) => state.testConfig);\n  const timeRemaining = useGameStore((state) => state.timeRemaining);\n  const isTimerRunning = useGameStore((state) => state.isTimerRunning);\n  const gameStatus = useGameStore((state) => state.gameStatus);\n\n  // Only show timer for time mode\n  if (testConfig.mode !== 'time') return null;\n\n  const totalSeconds = Math.ceil(timeRemaining / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n\n  // Determine urgency levels\n  const isVeryLowTime = totalSeconds <= 5;\n  const isLowTime = totalSeconds <= 10;\n  const isWarningTime = totalSeconds <= 30;\n\n  // Format display based on duration\n  const formatTime = () => {\n    if (testConfig.duration >= 60) {\n      // Show mm:ss for longer tests\n      return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n    } else {\n      // Show just seconds for shorter tests\n      return `${totalSeconds}s`;\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center\">\n      <div\n        className={cn(\n          'font-mono text-3xl font-bold transition-all duration-200',\n          {\n            // Normal state\n            'text-muted-foreground':\n              gameStatus === 'ready' || gameStatus === 'paused',\n            'text-foreground': gameStatus === 'running' && !isWarningTime,\n\n            // Warning states\n            'text-warning': isWarningTime && !isLowTime,\n            'text-error animate-pulse': isLowTime && !isVeryLowTime,\n            'text-error animate-bounce': isVeryLowTime,\n\n            // Size based on urgency\n            'text-4xl': isLowTime,\n            'text-5xl': isVeryLowTime,\n          }\n        )}\n      >\n        {formatTime()}\n      </div>\n\n      {/* Status indicator */}\n      <div className=\"ms-3 flex flex-col items-center\">\n        <div\n          className={cn('transition-base h-2 w-2 rounded-full', {\n            'bg-muted': gameStatus === 'ready' || gameStatus === 'paused',\n            'animate-pulse-subtle bg-success':\n              gameStatus === 'running' && isTimerRunning,\n            'bg-error': gameStatus === 'finished',\n          })}\n        />\n        <span className=\"text-muted-foreground mt-1 text-xs\">\n          {gameStatus === 'ready' && 'Ready'}\n          {gameStatus === 'running' && 'Running'}\n          {gameStatus === 'paused' && 'Paused'}\n          {gameStatus === 'finished' && 'Finished'}\n        </span>\n      </div>\n    </div>\n  );\n}\n\n// Alternative compact timer for when space is limited\nexport function CompactTimerDisplay() {\n  const testConfig = useGameStore((state) => state.testConfig);\n  const timeRemaining = useGameStore((state) => state.timeRemaining);\n  const gameStatus = useGameStore((state) => state.gameStatus);\n\n  if (testConfig.mode !== 'time') return null;\n\n  const totalSeconds = Math.ceil(timeRemaining / 1000);\n  const isLowTime = totalSeconds <= 10;\n\n  return (\n    <div\n      className={cn(\n        'inline-flex items-center gap-2 rounded-full border px-3 py-1 font-mono text-sm',\n        {\n          'border-muted-foreground/20 text-muted-foreground':\n            gameStatus !== 'running',\n          'border-success/20 text-success':\n            gameStatus === 'running' && !isLowTime,\n          'border-error/20 text-error animate-pulse':\n            gameStatus === 'running' && isLowTime,\n        }\n      )}\n    >\n      <div\n        className={cn('h-1.5 w-1.5 rounded-full', {\n          'bg-muted-foreground/40': gameStatus !== 'running',\n          'bg-success': gameStatus === 'running' && !isLowTime,\n          'bg-error': gameStatus === 'running' && isLowTime,\n        })}\n      />\n      {totalSeconds}s\n    </div>\n  );\n}\n","'use client';\n\nimport React, { useEffect } from 'react';\nimport { useGameStore } from '@/store/useGameStore';\nimport { ResultsCard } from './ResultsCard';\nimport { LoadingState } from './LoadingState';\nimport { ErrorState } from './ErrorState';\nimport { TimerDisplay } from './TimerDisplay';\nimport { LiveStats } from './LiveStats';\nimport { WordsProgress } from './WordsProgress';\nimport { useTimerCleanup, useTimerVisibility } from '@/hooks/useTimerCleanup';\nimport {\n  useDeviceDetection,\n  useVirtualKeyboard,\n} from '@/hooks/useDeviceDetection';\nimport { cn } from '@/lib/utils';\n\n// Helper function to calculate current word boundaries\nconst getCurrentWordBounds = (\n  currentWordIndex: number,\n  wordBoundaries: number[],\n  textLength: number\n) => {\n  const start = wordBoundaries[currentWordIndex] || 0;\n  const end = wordBoundaries[currentWordIndex + 1] || textLength;\n  return { start, end };\n};\n\nexport function TypingArea() {\n  // Use timer cleanup hooks\n  useTimerCleanup();\n  useTimerVisibility();\n\n  // Mobile detection and optimization\n  const { isMobile, isTouchDevice } = useDeviceDetection();\n  const hasVirtualKeyboard = useVirtualKeyboard();\n\n  // Use atomic selectors to prevent infinite loop and optimize performance\n  const charStates = useGameStore((state) => state.charStates);\n  const gameStatus = useGameStore((state) => state.gameStatus);\n  const testConfig = useGameStore((state) => state.testConfig);\n  const textWindow = useGameStore((state) => state.textWindow);\n  const handleKeyPress = useGameStore((state) => state.handleKeyPress);\n  const isPreparingGame = useGameStore((state) => state.isPreparingGame);\n  const gamePreparationError = useGameStore(\n    (state) => state.gamePreparationError\n  );\n  const prepareGame = useGameStore((state) => state.prepareGame);\n  const useFallbackWords = useGameStore((state) => state.useFallbackWords);\n\n  // Prepare game on component mount\n  useEffect(() => {\n    prepareGame();\n  }, [prepareGame]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Prevent default browser actions for specific keys\n      if (\n        event.key === 'Tab' ||\n        event.key === 'Escape' ||\n        (event.key === ' ' && event.target === document.body)\n      ) {\n        event.preventDefault();\n      }\n\n      // Only handle typing when game is ready or running\n      if (gameStatus === 'ready' || gameStatus === 'running') {\n        handleKeyPress(event.key);\n      }\n    };\n\n    // Add global keydown listener\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Cleanup function to remove listener\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [gameStatus, handleKeyPress]);\n\n  const getCharClassName = (status: string) => {\n    switch (status) {\n      case 'correct':\n        return 'text-success bg-success-soft';\n      case 'incorrect':\n        return 'text-error bg-error-soft';\n      case 'current':\n        return 'bg-primary text-primary-foreground animate-pulse border-l-2 border-primary';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  // Component to render the appropriate typing display based on mode\n  const TypingDisplay = () => {\n    if (testConfig.mode === 'time') {\n      return <TimeModePastedComponent />;\n    } else {\n      return <StandardTypingDisplay />;\n    }\n  };\n\n  // Optimized auto-scrolling display for time mode\n  const TimeModePastedComponent = () => {\n    const { lines, lineCharOffsets, scrollOffset } = textWindow;\n\n    // Get word tracking state\n    const currentWordIndex = useGameStore((state) => state.currentWordIndex);\n    const wordBoundaries = useGameStore((state) => state.wordBoundaries);\n\n    // Simple, performant scrolling - no complex interpolation needed\n    // The store handles the timing, we just smoothly animate the transition\n\n    // Buffer rendering to prevent content popping\n    const renderBuffer = 2;\n    const startIndex = Math.max(0, scrollOffset - renderBuffer);\n    const endIndex = Math.min(lines.length, scrollOffset + 3 + renderBuffer);\n    const linesToRender = lines.slice(startIndex, endIndex);\n\n    // Calculate current word boundaries\n    const { start: wordStart, end: wordEnd } = getCurrentWordBounds(\n      currentWordIndex,\n      wordBoundaries,\n      charStates.length\n    );\n\n    // Memoize the line rendering for performance\n    const renderLineWithCharacterStates = React.useMemo(() => {\n      return (line: string, lineIndex: number) => {\n        const globalLineIndex = startIndex + lineIndex;\n        const lineStartChar = lineCharOffsets[globalLineIndex] || 0;\n\n        return line.split('').map((char, charIndex) => {\n          const globalCharIndex = lineStartChar + charIndex;\n          const charState = charStates[globalCharIndex];\n\n          if (!charState) return null;\n\n          const isInCurrentWord =\n            globalCharIndex >= wordStart &&\n            globalCharIndex < wordEnd &&\n            char !== ' ';\n\n          return (\n            <span\n              key={`${globalLineIndex}-${charIndex}`}\n              className={cn(\n                'transition-colors duration-150',\n                getCharClassName(charState.status),\n                isInCurrentWord && 'bg-primary/10 dark:bg-primary/15'\n              )}\n            >\n              {char === ' ' ? '\\u00A0' : char}\n            </span>\n          );\n        });\n      };\n    }, [lineCharOffsets, startIndex, charStates, wordStart, wordEnd]);\n\n    return (\n      <div className=\"typing-container relative\">\n        {/* Fixed 3-line container with smooth transform-based scrolling */}\n        <div\n          className={cn(\n            'overflow-hidden',\n            // Responsive height\n            isMobile ? 'h-20' : 'h-24'\n          )}\n          role=\"textbox\"\n          aria-multiline=\"true\"\n          aria-describedby=\"typing-instructions game-status-live\"\n          tabIndex={0}\n        >\n          <div\n            className={cn(\n              'font-mono leading-8',\n              // Responsive text size\n              isMobile ? 'text-base' : 'text-lg sm:text-xl'\n            )}\n            style={{\n              transform: `translateY(-${(scrollOffset - startIndex) * (isMobile ? 28 : 32)}px)`,\n              transition: 'transform 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n              willChange: 'transform',\n            }}\n          >\n            {linesToRender.map((line, index) => (\n              <div\n                key={`line-${startIndex + index}`}\n                className={cn(\n                  'leading-8',\n                  isMobile ? 'min-h-[28px]' : 'min-h-[32px]'\n                )}\n                role=\"textbox\"\n                aria-label={`Line ${startIndex + index + 1}`}\n              >\n                {renderLineWithCharacterStates(line, index)}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Content streaming indicator */}\n        {useGameStore((state) => state.isContentStreaming) && (\n          <div className=\"text-info absolute top-0 right-0 animate-pulse text-xs\">\n            Loading more content...\n          </div>\n        )}\n\n        {gameStatus === 'ready' && (\n          <p className=\"text-muted-foreground mt-6 text-center text-sm\">\n            Start typing to begin the test...\n          </p>\n        )}\n\n        {gameStatus === 'paused' && (\n          <p className=\"text-warning mt-6 text-center text-sm font-medium\">\n            Test paused - continue typing to resume\n          </p>\n        )}\n      </div>\n    );\n  };\n\n  // Standard display for words and quote modes\n  const StandardTypingDisplay = () => {\n    // Get word tracking state\n    const currentWordIndex = useGameStore((state) => state.currentWordIndex);\n    const wordBoundaries = useGameStore((state) => state.wordBoundaries);\n\n    // Calculate current word boundaries\n    const { start, end } = getCurrentWordBounds(\n      currentWordIndex,\n      wordBoundaries,\n      charStates.length\n    );\n\n    return (\n      <div className=\"typing-container relative\">\n        <div\n          className={cn(\n            'w-full font-mono leading-relaxed tracking-wide break-words focus:outline-none',\n            // Responsive text size and spacing\n            isMobile\n              ? 'min-h-[150px] text-base'\n              : 'min-h-[200px] text-lg sm:text-xl lg:text-2xl'\n          )}\n          role=\"textbox\"\n          aria-multiline=\"true\"\n          aria-describedby=\"typing-instructions game-status-live\"\n          tabIndex={0}\n        >\n          {charStates.map((charState, index) => {\n            const isInCurrentWord =\n              index >= start && index < end && charState.char !== ' ';\n\n            return (\n              <span\n                key={index}\n                className={cn(\n                  'transition-colors duration-150',\n                  getCharClassName(charState.status),\n                  isInCurrentWord && 'bg-primary/10 dark:bg-primary/15'\n                )}\n                aria-label={\n                  charState.status === 'current'\n                    ? 'Current character'\n                    : undefined\n                }\n              >\n                {charState.char === ' ' ? '\\u00A0' : charState.char}\n              </span>\n            );\n          })}\n        </div>\n\n        {gameStatus === 'ready' && (\n          <p className=\"text-muted-foreground mt-6 text-center text-sm\">\n            Start typing to begin the test...\n          </p>\n        )}\n\n        {gameStatus === 'paused' && (\n          <p className=\"text-warning mt-6 text-center text-sm font-medium\">\n            Test paused - continue typing to resume\n          </p>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className={cn(\n        'mx-auto w-full max-w-5xl space-y-6',\n        // Mobile optimizations\n        isMobile && 'space-y-4 px-4',\n        hasVirtualKeyboard && 'pb-4'\n      )}\n    >\n      {/* Timer Display (time mode only) */}\n      {testConfig.mode === 'time' && (\n        <div className=\"flex justify-center\">\n          <TimerDisplay />\n        </div>\n      )}\n\n      {/* Words Progress (words mode only) */}\n      <WordsProgress />\n\n      {/* Main Typing Container */}\n      <div className=\"w-full\">\n        <div\n          className={cn(\n            'bg-card focus-within:ring-ring rounded-lg border focus-within:ring-2',\n            // Responsive padding\n            isMobile ? 'p-4' : 'p-6 sm:p-8',\n            // Touch optimizations\n            isTouchDevice && 'touch-manipulation'\n          )}\n          role=\"main\"\n          aria-label=\"Typing practice area\"\n        >\n          {/* Screen reader instructions */}\n          <div id=\"typing-instructions\" className=\"sr-only\">\n            {testConfig.mode === 'time'\n              ? `Type the text shown to practice your typing speed. Timer: ${testConfig.duration} seconds.`\n              : testConfig.mode === 'words'\n                ? `Type ${testConfig.wordCount} words as quickly and accurately as possible.`\n                : 'Type the quote shown as quickly and accurately as possible.'}{' '}\n            Use backspace to correct mistakes. Press Escape to open the command\n            palette. Current difficulty: {testConfig.difficulty}.\n          </div>\n\n          {/* Live region for game status updates */}\n          <div\n            id=\"game-status-live\"\n            className=\"sr-only\"\n            aria-live=\"polite\"\n            aria-atomic=\"false\"\n          >\n            {gameStatus === 'ready' && 'Ready to start typing'}\n            {gameStatus === 'running' && 'Test in progress'}\n            {gameStatus === 'paused' && 'Test paused'}\n            {gameStatus === 'finished' && 'Test completed'}\n          </div>\n\n          {isPreparingGame ? (\n            <LoadingState\n              message=\"Preparing your typing challenge...\"\n              variant=\"preparing\"\n            />\n          ) : gamePreparationError ? (\n            <ErrorState\n              error={`Game preparation failed: ${gamePreparationError}`}\n              onRetry={prepareGame}\n              onFallback={useFallbackWords}\n            />\n          ) : (\n            <TypingDisplay />\n          )}\n        </div>\n      </div>\n\n      {/* Statistics Below Text Box */}\n      {gameStatus === 'running' && (\n        <div className=\"flex justify-center\">\n          <LiveStats />\n        </div>\n      )}\n\n      {/* Show results card when test is finished */}\n      {gameStatus === 'finished' && <ResultsCard />}\n    </div>\n  );\n}\n","'use client';\n\nimport React from 'react';\nimport { useGameStore } from '@/store/useGameStore';\nimport { cn } from '@/lib/utils';\n\nexport function WordsProgress() {\n  const testConfig = useGameStore((state) => state.testConfig);\n  const wordsCompleted = useGameStore((state) => state.wordsCompleted);\n  const wordsProgress = useGameStore((state) => state.wordsProgress);\n  const targetWordCount = useGameStore((state) => state.targetWordCount);\n  const gameStatus = useGameStore((state) => state.gameStatus);\n\n  // Only show for words mode\n  if (testConfig.mode !== 'words') return null;\n\n  // Don't show if game hasn't started\n  if (gameStatus === 'idle' || gameStatus === 'ready') return null;\n\n  const isNearCompletion = wordsProgress >= 80;\n  const isAlmostDone = wordsProgress >= 90;\n\n  return (\n    <div className=\"mx-auto w-full max-w-lg\">\n      <div className=\"mb-2 flex items-center justify-between text-sm\">\n        <span className=\"text-muted-foreground\">Progress</span>\n        <span\n          className={cn(\n            'text-xs font-medium sm:text-sm',\n            isAlmostDone && 'text-success',\n            isNearCompletion && !isAlmostDone && 'text-info'\n          )}\n        >\n          {wordsCompleted}/{targetWordCount} words\n        </span>\n      </div>\n\n      <div className=\"bg-muted relative h-3 overflow-hidden rounded-full\">\n        <div\n          className={cn(\n            'absolute inset-y-0 left-0 rounded-full transition-all duration-300 ease-out',\n            'bg-primary',\n            isAlmostDone && 'bg-success',\n            isNearCompletion && !isAlmostDone && 'bg-info'\n          )}\n          style={{ width: `${wordsProgress}%` }}\n        >\n          {/* Animated shimmer effect when near completion */}\n          {isNearCompletion && (\n            <div className=\"animate-shimmer absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent\" />\n          )}\n        </div>\n\n        {/* Milestone markers */}\n        <div className=\"absolute inset-0 flex justify-between px-1\">\n          {[25, 50, 75].map((milestone) => (\n            <div\n              key={milestone}\n              className={cn(\n                'bg-border/50 h-full w-0.5 transition-opacity',\n                wordsProgress >= milestone && 'opacity-50'\n              )}\n              style={{ marginLeft: `${milestone}%` }}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Percentage text */}\n      <div className=\"mt-1 text-center\">\n        <span className=\"text-muted-foreground text-xs\">\n          {Math.round(wordsProgress)}% complete\n        </span>\n      </div>\n    </div>\n  );\n}\n\n// Compact version for smaller displays\nexport function CompactWordsProgress() {\n  const testConfig = useGameStore((state) => state.testConfig);\n  const wordsCompleted = useGameStore((state) => state.wordsCompleted);\n  const targetWordCount = useGameStore((state) => state.targetWordCount);\n  const wordsProgress = useGameStore((state) => state.wordsProgress);\n  const gameStatus = useGameStore((state) => state.gameStatus);\n\n  if (\n    testConfig.mode !== 'words' ||\n    gameStatus === 'idle' ||\n    gameStatus === 'ready'\n  ) {\n    return null;\n  }\n\n  const isNearCompletion = wordsProgress >= 80;\n\n  return (\n    <div\n      className={cn(\n        'inline-flex items-center gap-2 rounded-full border px-3 py-1 text-sm',\n        'border-muted-foreground/20',\n        isNearCompletion && 'border-success/20 text-success'\n      )}\n    >\n      <div className=\"bg-muted relative h-1.5 w-16 overflow-hidden rounded-full\">\n        <div\n          className={cn(\n            'absolute inset-y-0 left-0 rounded-full transition-all duration-300',\n            'bg-primary',\n            isNearCompletion && 'bg-success'\n          )}\n          style={{ width: `${wordsProgress}%` }}\n        />\n      </div>\n      <span className=\"font-mono\">\n        {wordsCompleted}/{targetWordCount}\n      </span>\n    </div>\n  );\n}\n","'use client';\n\nimport { useState, useEffect } from 'react';\n\ninterface DeviceInfo {\n  isMobile: boolean;\n  isTablet: boolean;\n  isDesktop: boolean;\n  isTouchDevice: boolean;\n  screenWidth: number;\n  userAgent: string;\n}\n\nexport function useDeviceDetection(): DeviceInfo {\n  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo>({\n    isMobile: false,\n    isTablet: false,\n    isDesktop: true,\n    isTouchDevice: false,\n    screenWidth: 1024,\n    userAgent: '',\n  });\n\n  useEffect(() => {\n    const updateDeviceInfo = () => {\n      const width = window.innerWidth;\n      const userAgent = navigator.userAgent;\n      const isTouchDevice =\n        'ontouchstart' in window || navigator.maxTouchPoints > 0;\n\n      // Breakpoints based on common standards\n      const isMobile = width < 768;\n      const isTablet = width >= 768 && width < 1024;\n      const isDesktop = width >= 1024;\n\n      setDeviceInfo({\n        isMobile,\n        isTablet,\n        isDesktop,\n        isTouchDevice,\n        screenWidth: width,\n        userAgent,\n      });\n    };\n\n    // Initial detection\n    updateDeviceInfo();\n\n    // Listen for resize events\n    window.addEventListener('resize', updateDeviceInfo);\n\n    // Listen for orientation changes on mobile\n    window.addEventListener('orientationchange', () => {\n      // Small delay to ensure the viewport has updated\n      setTimeout(updateDeviceInfo, 100);\n    });\n\n    return () => {\n      window.removeEventListener('resize', updateDeviceInfo);\n      window.removeEventListener('orientationchange', updateDeviceInfo);\n    };\n  }, []);\n\n  return deviceInfo;\n}\n\n// Additional utility hook for responsive behavior\nexport function useResponsiveValue<T>(mobile: T, tablet: T, desktop: T): T {\n  const { isMobile, isTablet } = useDeviceDetection();\n\n  if (isMobile) return mobile;\n  if (isTablet) return tablet;\n  return desktop;\n}\n\n// Hook for checking if device has virtual keyboard\nexport function useVirtualKeyboard() {\n  const [hasVirtualKeyboard, setHasVirtualKeyboard] = useState(false);\n  const { isMobile, isTablet } = useDeviceDetection();\n\n  useEffect(() => {\n    if (!isMobile && !isTablet) {\n      setHasVirtualKeyboard(false);\n      return;\n    }\n\n    const handleResize = () => {\n      // On mobile devices, viewport height reduction often indicates virtual keyboard\n      const viewportHeight = window.innerHeight;\n      const screenHeight = window.screen.height;\n      const heightRatio = viewportHeight / screenHeight;\n\n      // If viewport is significantly smaller than screen, likely virtual keyboard is open\n      setHasVirtualKeyboard(heightRatio < 0.75);\n    };\n\n    handleResize();\n    window.addEventListener('resize', handleResize);\n\n    return () => window.removeEventListener('resize', handleResize);\n  }, [isMobile, isTablet]);\n\n  return hasVirtualKeyboard;\n}\n","import { useEffect } from 'react';\nimport { useGameStore } from '@/store/useGameStore';\n\n/**\n * Custom hook to handle timer cleanup when component unmounts\n * Prevents memory leaks from lingering timers\n */\nexport function useTimerCleanup() {\n  const clearTimer = useGameStore((state) => state.clearTimer);\n\n  useEffect(() => {\n    // Cleanup function runs when component unmounts\n    return () => {\n      clearTimer();\n    };\n  }, [clearTimer]);\n}\n\n/**\n * Custom hook to handle page visibility changes\n * Pauses timer when page becomes hidden, resumes when visible\n */\nexport function useTimerVisibility() {\n  const gameStatus = useGameStore((state) => state.gameStatus);\n  const isTimerRunning = useGameStore((state) => state.isTimerRunning);\n  const pauseTimer = useGameStore((state) => state.pauseTimer);\n  const startTimer = useGameStore((state) => state.startTimer);\n\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (gameStatus === 'running') {\n        if (document.hidden && isTimerRunning) {\n          // Page became hidden, pause timer\n          pauseTimer();\n        } else if (!document.hidden && !isTimerRunning) {\n          // Page became visible, resume timer\n          startTimer();\n        }\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [gameStatus, isTimerRunning, pauseTimer, startTimer]);\n}\n","import type { Meta, StoryObj } from '@storybook/react';\nimport { TypingArea } from '@/components/game/TypingArea';\nimport { useGameStore } from '@/store/useGameStore';\n\nconst meta = {\n  title: 'Components/Game/TypingArea',\n  component: TypingArea,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component:\n          'The main typing interface where users practice their typing skills.',\n      },\n    },\n  },\n  tags: ['game', 'interactive', 'autodocs'],\n} satisfies Meta<typeof TypingArea>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Helper to set up game state\nconst setupGameState = (overrides = {}) => {\n  const text = 'The quick brown fox jumps over the lazy dog';\n  const charStates = text.split('').map((char, index) => ({\n    char,\n    status: 'default' as const,\n    index,\n  }));\n\n  return {\n    textToType: text,\n    charStates,\n    wordBoundaries: [0, 4, 10, 16, 20, 26, 31, 35, 40],\n    ...overrides,\n  };\n};\n\n// Ready state\nexport const Ready: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState(),\n        gameStatus: 'ready',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          wordCount: 50,\n          difficulty: 'Normal',\n          textSource: 'english1k',\n          punctuation: false,\n        },\n      },\n    },\n  },\n};\n\n// Active typing - time mode\nexport const ActiveTypingTimeMode: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            { char: 'T', status: 'correct', index: 0 },\n            { char: 'h', status: 'correct', index: 1 },\n            { char: 'e', status: 'correct', index: 2 },\n            { char: ' ', status: 'correct', index: 3 },\n            { char: 'q', status: 'correct', index: 4 },\n            { char: 'u', status: 'current', index: 5 },\n            { char: 'i', status: 'default', index: 6 },\n            { char: 'c', status: 'default', index: 7 },\n            { char: 'k', status: 'default', index: 8 },\n            ...Array(34)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(\n                  i + 9\n                ),\n                status: 'default' as const,\n                index: i + 9,\n              })),\n          ],\n          currentWordIndex: 1,\n          userInput: 'The q',\n        }),\n        gameStatus: 'running',\n        timeRemaining: 45000,\n        stats: {\n          wpm: 42,\n          rawWpm: 45,\n          accuracy: 96.5,\n          correctChars: 5,\n          incorrectChars: 0,\n          totalChars: 5,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Active typing session in time mode with live statistics',\n      },\n    },\n  },\n};\n\n// Words mode\nexport const WordsMode: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState(),\n        gameStatus: 'running',\n        wordsCompleted: 3,\n        targetWordCount: 25,\n        wordsProgress: 12,\n        testConfig: {\n          mode: 'words',\n          wordCount: 25,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Words mode with progress indicator',\n      },\n    },\n  },\n};\n\n// With errors\nexport const WithErrors: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            { char: 'T', status: 'correct', index: 0 },\n            { char: 'h', status: 'correct', index: 1 },\n            { char: 'e', status: 'correct', index: 2 },\n            { char: ' ', status: 'correct', index: 3 },\n            { char: 'q', status: 'incorrect', index: 4 },\n            { char: 'u', status: 'incorrect', index: 5 },\n            { char: 'i', status: 'current', index: 6 },\n            ...Array(36)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(\n                  i + 7\n                ),\n                status: 'default' as const,\n                index: i + 7,\n              })),\n          ],\n        }),\n        gameStatus: 'running',\n        stats: {\n          wpm: 38,\n          rawWpm: 42,\n          accuracy: 85.7,\n          correctChars: 4,\n          incorrectChars: 2,\n          totalChars: 6,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Typing with some errors highlighted in red',\n      },\n    },\n  },\n};\n\n// Completed test\nexport const Completed: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: Array(43)\n            .fill(null)\n            .map((_, i) => ({\n              char: 'The quick brown fox jumps over the lazy dog'.charAt(i),\n              status: 'correct' as const,\n              index: i,\n            })),\n        }),\n        gameStatus: 'finished',\n        stats: {\n          wpm: 72,\n          rawWpm: 75,\n          accuracy: 98.5,\n          correctChars: 43,\n          incorrectChars: 1,\n          totalChars: 44,\n          duration: 30000,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Completed typing test showing results',\n      },\n    },\n  },\n};\n\n// Dark mode\nexport const DarkMode: Story = {\n  ...Ready,\n  globals: {\n    theme: 'dark',\n  },\n};\n\n// Different caret styles\nexport const BlockCaret: Story = {\n  parameters: {\n    mockStore: {\n      game: setupGameState(),\n      settings: {\n        settings: {\n          appearance: {\n            caretStyle: 'block',\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const UnderlineCaret: Story = {\n  parameters: {\n    mockStore: {\n      game: setupGameState(),\n      settings: {\n        settings: {\n          appearance: {\n            caretStyle: 'underline',\n          },\n        },\n      },\n    },\n  },\n};\n\n// === BUG REPRODUCTION STORIES ===\n// These stories are specifically designed to isolate and reproduce visual bugs\n\n// Bug Test: Character styling for correct/incorrect states\nexport const CharacterStateBugs: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            { char: 'T', status: 'correct', index: 0 }, // Should be green\n            { char: 'h', status: 'correct', index: 1 }, // Should be green\n            { char: 'e', status: 'incorrect', index: 2 }, // Should be red\n            { char: ' ', status: 'incorrect', index: 3 }, // Should be red\n            { char: 'q', status: 'correct', index: 4 }, // Should be green\n            { char: 'u', status: 'incorrect', index: 5 }, // Should be red\n            { char: 'i', status: 'current', index: 6 }, // Should be highlighted\n            { char: 'c', status: 'default', index: 7 }, // Should be muted\n            { char: 'k', status: 'default', index: 8 }, // Should be muted\n            ...Array(34)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),\n                status: 'default' as const,\n                index: i + 9,\n              })),\n          ],\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          wordCount: 50,\n          difficulty: 'Normal',\n          textSource: 'english1k',\n          punctuation: false,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Bug test: Mixed correct/incorrect character states should display with proper colors. Green for correct, red for incorrect, highlighted for current.',\n      },\n    },\n  },\n};\n\n// Bug Test: Backspace artifacts and state reset issues\nexport const BackspaceArtifacts: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            { char: 'T', status: 'correct', index: 0 },\n            { char: 'h', status: 'correct', index: 1 },\n            { char: 'e', status: 'correct', index: 2 },\n            { char: ' ', status: 'correct', index: 3 },\n            { char: 'q', status: 'incorrect', index: 4 }, // User typed wrong, then backspaced\n            { char: 'u', status: 'current', index: 5 }, // Should be current after backspace\n            { char: 'i', status: 'default', index: 6 }, // Should be clean default\n            { char: 'c', status: 'default', index: 7 },\n            { char: 'k', status: 'default', index: 8 },\n            ...Array(34)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 9),\n                status: 'default' as const,\n                index: i + 9,\n              })),\n          ],\n          userInput: 'The x', // Shows that user typed 'x' instead of 'q', then backspaced\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Bug test: After backspace, character states should reset properly. Index 4 shows incorrect state (from wrong typing), index 5 should be current position after backspace.',\n      },\n    },\n  },\n};\n\n// Bug Test: All character states in sequence for visual verification\nexport const VisualRegressionTest: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            // Correct sequence\n            { char: 'C', status: 'correct', index: 0 },\n            { char: 'o', status: 'correct', index: 1 },\n            { char: 'r', status: 'correct', index: 2 },\n            { char: 'r', status: 'correct', index: 3 },\n            { char: 'e', status: 'correct', index: 4 },\n            { char: 'c', status: 'correct', index: 5 },\n            { char: 't', status: 'correct', index: 6 },\n            { char: ' ', status: 'correct', index: 7 },\n            // Incorrect sequence\n            { char: 'I', status: 'incorrect', index: 8 },\n            { char: 'n', status: 'incorrect', index: 9 },\n            { char: 'c', status: 'incorrect', index: 10 },\n            { char: 'o', status: 'incorrect', index: 11 },\n            { char: 'r', status: 'incorrect', index: 12 },\n            { char: 'r', status: 'incorrect', index: 13 },\n            { char: 'e', status: 'incorrect', index: 14 },\n            { char: 'c', status: 'incorrect', index: 15 },\n            { char: 't', status: 'incorrect', index: 16 },\n            { char: ' ', status: 'incorrect', index: 17 },\n            // Current position\n            { char: 'C', status: 'current', index: 18 },\n            // Default/untyped\n            { char: 'u', status: 'default', index: 19 },\n            { char: 'r', status: 'default', index: 20 },\n            { char: 'r', status: 'default', index: 21 },\n            { char: 'e', status: 'default', index: 22 },\n            { char: 'n', status: 'default', index: 23 },\n            { char: 't', status: 'default', index: 24 },\n          ],\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'words',\n          wordCount: 25,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Visual regression test: All character states displayed in sequence. Use this to verify styling consistency across all states.',\n      },\n    },\n  },\n};\n\n// Bug Test: Edge case with rapid state transitions\nexport const EdgeCaseStates: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            // Mix of states that might cause rendering issues\n            { char: 'E', status: 'correct', index: 0 },\n            { char: 'd', status: 'incorrect', index: 1 },\n            { char: 'g', status: 'correct', index: 2 },\n            { char: 'e', status: 'incorrect', index: 3 },\n            { char: ' ', status: 'current', index: 4 }, // Current on space\n            { char: 'c', status: 'default', index: 5 },\n            { char: 'a', status: 'correct', index: 6 }, // Correct after current\n            { char: 's', status: 'incorrect', index: 7 }, // Incorrect after correct\n            { char: 'e', status: 'current', index: 8 }, // Another current (should not happen)\n            { char: 's', status: 'default', index: 9 },\n            ...Array(33)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 10),\n                status: 'default' as const,\n                index: i + 10,\n              })),\n          ],\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 30,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Edge case test: Unusual state combinations that might cause visual glitches. Tests rapid transitions and potentially invalid state combinations.',\n      },\n    },\n  },\n};\n\n// Bug Test: Invisible correct characters issue\nexport const InvisibleCorrectCharacters: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            // These should be clearly visible with green styling\n            { char: 'T', status: 'correct', index: 0 },\n            { char: 'h', status: 'correct', index: 1 },\n            { char: 'e', status: 'correct', index: 2 },\n            { char: 's', status: 'correct', index: 3 },\n            { char: 'e', status: 'correct', index: 4 },\n            { char: ' ', status: 'correct', index: 5 },\n            { char: 's', status: 'correct', index: 6 },\n            { char: 'h', status: 'correct', index: 7 },\n            { char: 'o', status: 'correct', index: 8 },\n            { char: 'u', status: 'correct', index: 9 },\n            { char: 'l', status: 'correct', index: 10 },\n            { char: 'd', status: 'correct', index: 11 },\n            { char: ' ', status: 'correct', index: 12 },\n            { char: 'b', status: 'correct', index: 13 },\n            { char: 'e', status: 'correct', index: 14 },\n            { char: ' ', status: 'correct', index: 15 },\n            { char: 'g', status: 'correct', index: 16 },\n            { char: 'r', status: 'correct', index: 17 },\n            { char: 'e', status: 'correct', index: 18 },\n            { char: 'e', status: 'correct', index: 19 },\n            { char: 'n', status: 'current', index: 20 },\n            ...Array(22)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(i + 21),\n                status: 'default' as const,\n                index: i + 21,\n              })),\n          ],\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Bug test: Many consecutive correct characters. If styling is broken, these may appear unstyled/invisible instead of green.',\n      },\n    },\n  },\n};\n"],"names":[],"sourceRoot":""}