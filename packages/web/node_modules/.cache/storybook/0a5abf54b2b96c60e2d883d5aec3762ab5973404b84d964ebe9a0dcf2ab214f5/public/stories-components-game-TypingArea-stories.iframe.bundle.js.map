{"version":3,"file":"stories-components-game-TypingArea-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sources":["webpack://type/./src/stories/components/game/TypingArea.stories.tsx"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/nextjs';\nimport { TypingArea } from '@/components/game/TypingArea';\nimport { useGameStore } from '@/store/useGameStore';\n\nconst meta = {\n  title: 'Components/Game/TypingArea',\n  component: TypingArea,\n  parameters: {\n    layout: 'padded',\n    docs: {\n      description: {\n        component:\n          'The main typing interface where users practice their typing skills.',\n      },\n    },\n  },\n  tags: ['game', 'interactive', 'autodocs'],\n} satisfies Meta<typeof TypingArea>;\n\nexport default meta;\ntype Story = StoryObj<typeof meta>;\n\n// Helper to set up game state\nconst setupGameState = (overrides = {}) => {\n  const text = 'The quick brown fox jumps over the lazy dog';\n  const charStates = text.split('').map((char, index) => ({\n    char,\n    status: 'default' as const,\n    index,\n  }));\n\n  return {\n    textToType: text,\n    charStates,\n    wordBoundaries: [0, 4, 10, 16, 20, 26, 31, 35, 40],\n    ...overrides,\n  };\n};\n\n// Ready state\nexport const Ready: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState(),\n        gameStatus: 'ready',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          wordCount: 50,\n          difficulty: 'Normal',\n          textSource: 'english1k',\n          punctuation: false,\n        },\n      },\n    },\n  },\n};\n\n// Active typing - time mode\nexport const ActiveTypingTimeMode: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            { char: 'T', status: 'correct', index: 0 },\n            { char: 'h', status: 'correct', index: 1 },\n            { char: 'e', status: 'correct', index: 2 },\n            { char: ' ', status: 'correct', index: 3 },\n            { char: 'q', status: 'correct', index: 4 },\n            { char: 'u', status: 'current', index: 5 },\n            { char: 'i', status: 'default', index: 6 },\n            { char: 'c', status: 'default', index: 7 },\n            { char: 'k', status: 'default', index: 8 },\n            ...Array(34)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(\n                  i + 9\n                ),\n                status: 'default' as const,\n                index: i + 9,\n              })),\n          ],\n          currentWordIndex: 1,\n          userInput: 'The q',\n        }),\n        gameStatus: 'running',\n        timeRemaining: 45000,\n        stats: {\n          wpm: 42,\n          rawWpm: 45,\n          accuracy: 96.5,\n          correctChars: 5,\n          incorrectChars: 0,\n          totalChars: 5,\n        },\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Active typing session in time mode with live statistics',\n      },\n    },\n  },\n};\n\n// Words mode\nexport const WordsMode: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState(),\n        gameStatus: 'running',\n        wordsCompleted: 3,\n        targetWordCount: 25,\n        wordsProgress: 12,\n        testConfig: {\n          mode: 'words',\n          wordCount: 25,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Words mode with progress indicator',\n      },\n    },\n  },\n};\n\n// With errors\nexport const WithErrors: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            { char: 'T', status: 'correct', index: 0 },\n            { char: 'h', status: 'correct', index: 1 },\n            { char: 'e', status: 'correct', index: 2 },\n            { char: ' ', status: 'correct', index: 3 },\n            { char: 'q', status: 'incorrect', index: 4 },\n            { char: 'u', status: 'incorrect', index: 5 },\n            { char: 'i', status: 'current', index: 6 },\n            ...Array(36)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(\n                  i + 7\n                ),\n                status: 'default' as const,\n                index: i + 7,\n              })),\n          ],\n        }),\n        gameStatus: 'running',\n        stats: {\n          wpm: 38,\n          rawWpm: 42,\n          accuracy: 85.7,\n          correctChars: 4,\n          incorrectChars: 2,\n          totalChars: 6,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Typing with some errors highlighted in red',\n      },\n    },\n  },\n};\n\n// Completed test\nexport const Completed: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: Array(43)\n            .fill(null)\n            .map((_, i) => ({\n              char: 'The quick brown fox jumps over the lazy dog'.charAt(i),\n              status: 'correct' as const,\n              index: i,\n            })),\n        }),\n        gameStatus: 'finished',\n        stats: {\n          wpm: 72,\n          rawWpm: 75,\n          accuracy: 98.5,\n          correctChars: 43,\n          incorrectChars: 1,\n          totalChars: 44,\n          duration: 30000,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story: 'Completed typing test showing results',\n      },\n    },\n  },\n};\n\n// Dark mode\nexport const DarkMode: Story = {\n  ...Ready,\n  globals: {\n    theme: 'dark',\n  },\n};\n\n// Different caret styles\nexport const BlockCaret: Story = {\n  parameters: {\n    mockStore: {\n      game: setupGameState(),\n      settings: {\n        settings: {\n          appearance: {\n            caretStyle: 'block',\n          },\n        },\n      },\n    },\n  },\n};\n\nexport const UnderlineCaret: Story = {\n  parameters: {\n    mockStore: {\n      game: setupGameState(),\n      settings: {\n        settings: {\n          appearance: {\n            caretStyle: 'underline',\n          },\n        },\n      },\n    },\n  },\n};\n\n// === BUG REPRODUCTION STORIES ===\n// These stories are specifically designed to isolate and reproduce visual bugs\n\n// Bug Test: Character styling for correct/incorrect states\nexport const CharacterStateBugs: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            { char: 'T', status: 'correct', index: 0 }, // Should be green\n            { char: 'h', status: 'correct', index: 1 }, // Should be green\n            { char: 'e', status: 'incorrect', index: 2 }, // Should be red\n            { char: ' ', status: 'incorrect', index: 3 }, // Should be red\n            { char: 'q', status: 'correct', index: 4 }, // Should be green\n            { char: 'u', status: 'incorrect', index: 5 }, // Should be red\n            { char: 'i', status: 'current', index: 6 }, // Should be highlighted\n            { char: 'c', status: 'default', index: 7 }, // Should be muted\n            { char: 'k', status: 'default', index: 8 }, // Should be muted\n            ...Array(34)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(\n                  i + 9\n                ),\n                status: 'default' as const,\n                index: i + 9,\n              })),\n          ],\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n          wordCount: 50,\n          difficulty: 'Normal',\n          textSource: 'english1k',\n          punctuation: false,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story:\n          'Bug test: Mixed correct/incorrect character states should display with proper colors. Green for correct, red for incorrect, highlighted for current.',\n      },\n    },\n  },\n};\n\n// Bug Test: Backspace artifacts and state reset issues\nexport const BackspaceArtifacts: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            { char: 'T', status: 'correct', index: 0 },\n            { char: 'h', status: 'correct', index: 1 },\n            { char: 'e', status: 'correct', index: 2 },\n            { char: ' ', status: 'correct', index: 3 },\n            { char: 'q', status: 'incorrect', index: 4 }, // User typed wrong, then backspaced\n            { char: 'u', status: 'current', index: 5 }, // Should be current after backspace\n            { char: 'i', status: 'default', index: 6 }, // Should be clean default\n            { char: 'c', status: 'default', index: 7 },\n            { char: 'k', status: 'default', index: 8 },\n            ...Array(34)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(\n                  i + 9\n                ),\n                status: 'default' as const,\n                index: i + 9,\n              })),\n          ],\n          userInput: 'The x', // Shows that user typed 'x' instead of 'q', then backspaced\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story:\n          'Bug test: After backspace, character states should reset properly. Index 4 shows incorrect state (from wrong typing), index 5 should be current position after backspace.',\n      },\n    },\n  },\n};\n\n// Bug Test: All character states in sequence for visual verification\nexport const VisualRegressionTest: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            // Correct sequence\n            { char: 'C', status: 'correct', index: 0 },\n            { char: 'o', status: 'correct', index: 1 },\n            { char: 'r', status: 'correct', index: 2 },\n            { char: 'r', status: 'correct', index: 3 },\n            { char: 'e', status: 'correct', index: 4 },\n            { char: 'c', status: 'correct', index: 5 },\n            { char: 't', status: 'correct', index: 6 },\n            { char: ' ', status: 'correct', index: 7 },\n            // Incorrect sequence\n            { char: 'I', status: 'incorrect', index: 8 },\n            { char: 'n', status: 'incorrect', index: 9 },\n            { char: 'c', status: 'incorrect', index: 10 },\n            { char: 'o', status: 'incorrect', index: 11 },\n            { char: 'r', status: 'incorrect', index: 12 },\n            { char: 'r', status: 'incorrect', index: 13 },\n            { char: 'e', status: 'incorrect', index: 14 },\n            { char: 'c', status: 'incorrect', index: 15 },\n            { char: 't', status: 'incorrect', index: 16 },\n            { char: ' ', status: 'incorrect', index: 17 },\n            // Current position\n            { char: 'C', status: 'current', index: 18 },\n            // Default/untyped\n            { char: 'u', status: 'default', index: 19 },\n            { char: 'r', status: 'default', index: 20 },\n            { char: 'r', status: 'default', index: 21 },\n            { char: 'e', status: 'default', index: 22 },\n            { char: 'n', status: 'default', index: 23 },\n            { char: 't', status: 'default', index: 24 },\n          ],\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'words',\n          wordCount: 25,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story:\n          'Visual regression test: All character states displayed in sequence. Use this to verify styling consistency across all states.',\n      },\n    },\n  },\n};\n\n// Bug Test: Edge case with rapid state transitions\nexport const EdgeCaseStates: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            // Mix of states that might cause rendering issues\n            { char: 'E', status: 'correct', index: 0 },\n            { char: 'd', status: 'incorrect', index: 1 },\n            { char: 'g', status: 'correct', index: 2 },\n            { char: 'e', status: 'incorrect', index: 3 },\n            { char: ' ', status: 'current', index: 4 }, // Current on space\n            { char: 'c', status: 'default', index: 5 },\n            { char: 'a', status: 'correct', index: 6 }, // Correct after current\n            { char: 's', status: 'incorrect', index: 7 }, // Incorrect after correct\n            { char: 'e', status: 'current', index: 8 }, // Another current (should not happen)\n            { char: 's', status: 'default', index: 9 },\n            ...Array(33)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(\n                  i + 10\n                ),\n                status: 'default' as const,\n                index: i + 10,\n              })),\n          ],\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 30,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story:\n          'Edge case test: Unusual state combinations that might cause visual glitches. Tests rapid transitions and potentially invalid state combinations.',\n      },\n    },\n  },\n};\n\n// Bug Test: Invisible correct characters issue\nexport const InvisibleCorrectCharacters: Story = {\n  parameters: {\n    mockStore: {\n      game: {\n        ...setupGameState({\n          charStates: [\n            // These should be clearly visible with green styling\n            { char: 'T', status: 'correct', index: 0 },\n            { char: 'h', status: 'correct', index: 1 },\n            { char: 'e', status: 'correct', index: 2 },\n            { char: 's', status: 'correct', index: 3 },\n            { char: 'e', status: 'correct', index: 4 },\n            { char: ' ', status: 'correct', index: 5 },\n            { char: 's', status: 'correct', index: 6 },\n            { char: 'h', status: 'correct', index: 7 },\n            { char: 'o', status: 'correct', index: 8 },\n            { char: 'u', status: 'correct', index: 9 },\n            { char: 'l', status: 'correct', index: 10 },\n            { char: 'd', status: 'correct', index: 11 },\n            { char: ' ', status: 'correct', index: 12 },\n            { char: 'b', status: 'correct', index: 13 },\n            { char: 'e', status: 'correct', index: 14 },\n            { char: ' ', status: 'correct', index: 15 },\n            { char: 'g', status: 'correct', index: 16 },\n            { char: 'r', status: 'correct', index: 17 },\n            { char: 'e', status: 'correct', index: 18 },\n            { char: 'e', status: 'correct', index: 19 },\n            { char: 'n', status: 'current', index: 20 },\n            ...Array(22)\n              .fill(null)\n              .map((_, i) => ({\n                char: 'The quick brown fox jumps over the lazy dog'.charAt(\n                  i + 21\n                ),\n                status: 'default' as const,\n                index: i + 21,\n              })),\n          ],\n        }),\n        gameStatus: 'running',\n        testConfig: {\n          mode: 'time',\n          duration: 60,\n        },\n      },\n    },\n    docs: {\n      description: {\n        story:\n          'Bug test: Many consecutive correct characters. If styling is broken, these may appear unstyled/invisible instead of green.',\n      },\n    },\n  },\n};\n"],"names":[],"sourceRoot":""}