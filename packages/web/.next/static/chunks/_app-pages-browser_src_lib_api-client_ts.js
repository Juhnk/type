"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_api-client_ts"],{

/***/ "(app-pages-browser)/./src/lib/api-client.ts":
/*!*******************************!*\
  !*** ./src/lib/api-client.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiClient: () => (/* binding */ apiClient),\n/* harmony export */   fetcher: () => (/* binding */ fetcher),\n/* harmony export */   generateChallenge: () => (/* binding */ generateChallenge),\n/* harmony export */   getSettings: () => (/* binding */ getSettings),\n/* harmony export */   getWordLists: () => (/* binding */ getWordLists),\n/* harmony export */   getWords: () => (/* binding */ getWords),\n/* harmony export */   loginUser: () => (/* binding */ loginUser),\n/* harmony export */   registerUser: () => (/* binding */ registerUser),\n/* harmony export */   resetSettings: () => (/* binding */ resetSettings),\n/* harmony export */   saveSingleTest: () => (/* binding */ saveSingleTest),\n/* harmony export */   syncLocalHistory: () => (/* binding */ syncLocalHistory),\n/* harmony export */   updateSettings: () => (/* binding */ updateSettings)\n/* harmony export */ });\n/* harmony import */ var _history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./history */ \"(app-pages-browser)/./src/lib/history.ts\");\n\nconst API_BASE_URL = \"http://localhost:8081\" || 0;\nclass ApiClient {\n    async makeRequest(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(API_BASE_URL).concat(endpoint);\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers\n            },\n            // Add timeout and better error handling\n            signal: AbortSignal.timeout(10000),\n            ...options\n        };\n        try {\n            const response = await fetch(url, config);\n            // Handle non-JSON responses or network errors\n            let data;\n            try {\n                data = await response.json();\n            } catch (e) {\n                throw new Error(\"Server returned invalid response. Status: \".concat(response.status));\n            }\n            if (!response.ok) {\n                // Provide more specific error messages based on status code\n                if (response.status === 0 || response.status >= 500) {\n                    throw new Error('Server is currently unavailable. Please try again later.');\n                } else if (response.status === 404) {\n                    throw new Error('The requested resource was not found.');\n                } else if (response.status === 401) {\n                    throw new Error('Invalid credentials. Please check your email and password.');\n                } else if (response.status === 409) {\n                    throw new Error('An account with this email already exists.');\n                } else {\n                    throw new Error((data === null || data === void 0 ? void 0 : data.error) || \"Request failed with status \".concat(response.status));\n                }\n            }\n            return data;\n        } catch (error) {\n            // Handle network errors and timeouts\n            if (error instanceof Error) {\n                if (error.name === 'AbortError' || error.name === 'TimeoutError') {\n                    throw new Error('Request timed out. Please check your connection and try again.');\n                } else if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {\n                    throw new Error('Network error. Please check your internet connection and ensure the server is running.');\n                }\n                // Re-throw our custom errors\n                throw error;\n            }\n            throw new Error('An unexpected error occurred. Please try again.');\n        }\n    }\n    constructor(){\n        var _this = this;\n        // Use arrow functions to preserve 'this' context when destructured\n        this.registerUser = async (data)=>{\n            return this.makeRequest('/api/auth/register', {\n                method: 'POST',\n                body: JSON.stringify(data)\n            });\n        };\n        this.loginUser = async (data)=>{\n            return this.makeRequest('/api/auth/login', {\n                method: 'POST',\n                body: JSON.stringify(data)\n            });\n        };\n        this.syncLocalHistory = async (token)=>{\n            const localHistory = (0,_history__WEBPACK_IMPORTED_MODULE_0__.getTestHistory)();\n            // If no local history exists, return null\n            if (localHistory.length === 0) {\n                return null;\n            }\n            // Transform local TestResult format to match API expected format\n            const transformedHistory = localHistory.map((test)=>({\n                    wpm: test.wpm,\n                    accuracy: test.accuracy,\n                    rawWpm: test.wpm,\n                    consistency: null,\n                    config: {\n                        mode: test.mode,\n                        duration: test.duration,\n                        wordCount: test.wordCount,\n                        textSource: test.textSource,\n                        difficulty: test.difficulty,\n                        punctuation: test.punctuation\n                    },\n                    tags: [],\n                    timestamp: new Date(test.timestamp).toISOString()\n                }));\n            const response = await this.makeRequest('/api/me/tests/bulk', {\n                method: 'POST',\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                },\n                body: JSON.stringify({\n                    testResults: transformedHistory\n                })\n            });\n            // Clear local history after successful sync\n            (0,_history__WEBPACK_IMPORTED_MODULE_0__.clearTestHistory)();\n            return response;\n        };\n        this.generateChallenge = async (prompt, token)=>{\n            return this.makeRequest('/api/generate-challenge', {\n                method: 'POST',\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                },\n                body: JSON.stringify({\n                    prompt\n                })\n            });\n        };\n        this.saveSingleTest = async (result, token)=>{\n            // Transform local TestResult format to match API expected format\n            const transformedResult = {\n                wpm: result.wpm,\n                accuracy: result.accuracy,\n                rawWpm: result.wpm,\n                consistency: null,\n                config: {\n                    mode: result.mode,\n                    duration: result.duration,\n                    wordCount: result.wordCount,\n                    textSource: result.textSource,\n                    difficulty: result.difficulty,\n                    punctuation: result.punctuation\n                },\n                tags: [],\n                timestamp: new Date(result.timestamp).toISOString()\n            };\n            return this.makeRequest('/api/me/tests', {\n                method: 'POST',\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                },\n                body: JSON.stringify(transformedResult)\n            });\n        };\n        // Word Source API methods\n        this.getWords = async function() {\n            let list = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'english1k', limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100, randomize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true, options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};\n            const params = new URLSearchParams({\n                list,\n                limit: limit.toString(),\n                randomize: randomize.toString()\n            });\n            // Add enhancement parameters if specified\n            if (options.punctuation !== undefined) {\n                params.append('punctuation', options.punctuation.toString());\n            }\n            if (options.numbers !== undefined) {\n                params.append('numbers', options.numbers.toString());\n            }\n            if (options.punctuationDensity) {\n                params.append('punctuation_density', options.punctuationDensity);\n            }\n            return _this.makeRequest(\"/api/words?\".concat(params.toString()));\n        };\n        this.getWordLists = async ()=>{\n            return this.makeRequest('/api/words/lists');\n        };\n        // Settings API methods\n        this.getSettings = async (token)=>{\n            return this.makeRequest('/api/me/settings', {\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                }\n            });\n        };\n        this.updateSettings = async (settings, token)=>{\n            return this.makeRequest('/api/me/settings', {\n                method: 'PUT',\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                },\n                body: JSON.stringify(settings)\n            });\n        };\n        this.resetSettings = async (token)=>{\n            return this.makeRequest('/api/me/settings', {\n                method: 'DELETE',\n                headers: {\n                    Authorization: \"Bearer \".concat(token)\n                }\n            });\n        };\n    }\n}\nconst apiClient = new ApiClient();\n// Export convenience functions with proper binding\nconst { registerUser, loginUser, syncLocalHistory, generateChallenge, saveSingleTest, getWords, getWordLists, getSettings, updateSettings, resetSettings } = apiClient;\n// SWR fetcher function for authenticated GET requests\nasync function fetcher(url, token) {\n    const response = await fetch(\"\".concat(API_BASE_URL).concat(url), {\n        headers: {\n            Authorization: \"Bearer \".concat(token),\n            'Content-Type': 'application/json'\n        }\n    });\n    if (!response.ok) {\n        const data = await response.json();\n        const error = new Error('An error occurred while fetching the data.');\n        error.info = data;\n        error.status = response.status;\n        throw error;\n    }\n    return response.json();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api-client.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/history.ts":
/*!****************************!*\
  !*** ./src/lib/history.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateAverageAccuracy: () => (/* binding */ calculateAverageAccuracy),\n/* harmony export */   calculateAverageWpm: () => (/* binding */ calculateAverageWpm),\n/* harmony export */   calculateHighestWpm: () => (/* binding */ calculateHighestWpm),\n/* harmony export */   clearTestHistory: () => (/* binding */ clearTestHistory),\n/* harmony export */   getTestHistory: () => (/* binding */ getTestHistory),\n/* harmony export */   getTestStatistics: () => (/* binding */ getTestStatistics),\n/* harmony export */   getTotalTestsTaken: () => (/* binding */ getTotalTestsTaken),\n/* harmony export */   saveTestResult: () => (/* binding */ saveTestResult)\n/* harmony export */ });\n// Test result interface matching GDD Section 4.2 schema\n// Storage key for localStorage\nconst STORAGE_KEY = 'typeamp-data';\n/**\n * Retrieves test history from localStorage\n * @returns Array of test results, empty array if no data exists\n */ function getTestHistory() {\n    if (false) {}\n    try {\n        const storedData = localStorage.getItem(STORAGE_KEY);\n        if (!storedData) {\n            return [];\n        }\n        const parsedData = JSON.parse(storedData);\n        // Ensure we have a testHistory array\n        if (!parsedData.testHistory || !Array.isArray(parsedData.testHistory)) {\n            return [];\n        }\n        return parsedData.testHistory;\n    } catch (error) {\n        console.error('Error retrieving test history:', error);\n        return [];\n    }\n}\n/**\n * Saves a new test result to localStorage\n * @param result - The test result to save\n */ function saveTestResult(result) {\n    if (false) {}\n    try {\n        // Get existing history\n        const existingHistory = getTestHistory();\n        // Add new result to the beginning of the array (most recent first)\n        const updatedHistory = [\n            result,\n            ...existingHistory\n        ];\n        // Limit history to last 100 results to prevent excessive storage\n        const limitedHistory = updatedHistory.slice(0, 100);\n        // Create the full data structure\n        const dataToStore = {\n            testHistory: limitedHistory,\n            lastUpdated: Date.now()\n        };\n        // Save to localStorage\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(dataToStore));\n    } catch (error) {\n        console.error('Error saving test result:', error);\n    }\n}\n/**\n * Clears all test history from localStorage\n */ function clearTestHistory() {\n    if (false) {}\n    try {\n        localStorage.removeItem(STORAGE_KEY);\n    } catch (error) {\n        console.error('Error clearing test history:', error);\n    }\n}\n/**\n * Gets statistics from test history\n * @returns Object with calculated statistics\n */ function getTestStatistics() {\n    const history = getTestHistory();\n    if (history.length === 0) {\n        return {\n            totalTests: 0,\n            averageWpm: 0,\n            averageAccuracy: 0,\n            bestWpm: 0,\n            totalTimeTyping: 0\n        };\n    }\n    const totalTests = history.length;\n    const totalWpm = history.reduce((sum, test)=>sum + test.wpm, 0);\n    const totalAccuracy = history.reduce((sum, test)=>sum + test.accuracy, 0);\n    const bestWpm = Math.max(...history.map((test)=>test.wpm));\n    // Calculate total time spent typing (in seconds)\n    const totalTimeTyping = history.reduce((sum, test)=>{\n        if (test.mode === 'time' && test.duration) {\n            return sum + test.duration;\n        }\n        // For words/quote modes, estimate based on WPM\n        const estimatedTime = test.totalChars / 5 / test.wpm * 60;\n        return sum + estimatedTime;\n    }, 0);\n    return {\n        totalTests,\n        averageWpm: Math.round(totalWpm / totalTests),\n        averageAccuracy: Math.round(totalAccuracy / totalTests),\n        bestWpm,\n        totalTimeTyping: Math.round(totalTimeTyping)\n    };\n}\n/**\n * Calculate average WPM from test results\n * @param testResults - Array of test results\n * @returns Average WPM rounded to nearest integer\n */ function calculateAverageWpm(testResults) {\n    if (testResults.length === 0) return 0;\n    const totalWpm = testResults.reduce((sum, test)=>sum + test.wpm, 0);\n    return Math.round(totalWpm / testResults.length);\n}\n/**\n * Find highest WPM from test results\n * @param testResults - Array of test results\n * @returns Highest WPM achieved\n */ function calculateHighestWpm(testResults) {\n    if (testResults.length === 0) return 0;\n    return Math.max(...testResults.map((test)=>test.wpm));\n}\n/**\n * Calculate average accuracy from test results\n * @param testResults - Array of test results\n * @returns Average accuracy as percentage rounded to nearest integer\n */ function calculateAverageAccuracy(testResults) {\n    if (testResults.length === 0) return 0;\n    const totalAccuracy = testResults.reduce((sum, test)=>sum + test.accuracy, 0);\n    return Math.round(totalAccuracy / testResults.length);\n}\n/**\n * Get total number of tests taken\n * @param testResults - Array of test results\n * @returns Total number of tests\n */ function getTotalTestsTaken(testResults) {\n    return testResults.length;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/history.ts\n"));

/***/ })

}]);