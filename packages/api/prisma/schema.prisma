// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  passwordHash String
  createdAt    DateTime       @default(now())
  
  userSettings UserSettings?
  testResults  TestResult[]
  
  @@map("Users")
}

model UserSettings {
  userId              String   @id
  
  // Appearance Settings
  theme               String   @default("slate")
  font                String   @default("Roboto Mono")
  fontSize            Int      @default(18)
  caretStyle          String   @default("line")
  caretColor          String   @default("#3b82f6")
  colorScheme         String   @default("auto")
  animations          Boolean  @default(true)
  smoothCaret         Boolean  @default(true)
  showWpmCounter      Boolean  @default(true)
  showAccuracyCounter Boolean  @default(true)
  
  // Behavior Settings
  soundEffects        Boolean  @default(false)
  keyFeedback         Boolean  @default(false)
  defaultMode         String   @default("time")
  defaultDifficulty   String   @default("Normal")
  defaultDuration     Int      @default(60)
  defaultWordCount    Int      @default(50)
  paceCaretWpm        Int      @default(0)
  paceCaretEnabled    Boolean  @default(false)
  autoSave            Boolean  @default(true)
  focusMode           Boolean  @default(false)
  quickRestart        Boolean  @default(true)
  blindMode           Boolean  @default(false)
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@map("UserSettings")
}

model TestResult {
  id           String   @id @default(cuid())
  userId       String
  wpm          Int
  accuracy     Float
  rawWpm       Int
  consistency  Float?
  config       String
  tags         String
  timestamp    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@map("TestResults")
}
